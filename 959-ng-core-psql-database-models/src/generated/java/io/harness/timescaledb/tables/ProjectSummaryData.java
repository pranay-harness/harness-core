/*
 * This file is generated by jOOQ.
 */
package io.harness.timescaledb.tables;

import io.harness.timescaledb.Public;
import io.harness.timescaledb.tables.records.ProjectSummaryDataRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ProjectSummaryData extends TableImpl<ProjectSummaryDataRecord> {
  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>public.project_summary_data</code>
   */
  public static final ProjectSummaryData PROJECT_SUMMARY_DATA = new ProjectSummaryData();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ProjectSummaryDataRecord> getRecordType() {
    return ProjectSummaryDataRecord.class;
  }

  /**
   * The column <code>public.project_summary_data.account_identifier</code>.
   */
  public final TableField<ProjectSummaryDataRecord, String> ACCOUNT_IDENTIFIER =
      createField(DSL.name("account_identifier"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.project_summary_data.org_identifier</code>.
   */
  public final TableField<ProjectSummaryDataRecord, String> ORG_IDENTIFIER =
      createField(DSL.name("org_identifier"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.project_summary_data.project_identifier</code>.
   */
  public final TableField<ProjectSummaryDataRecord, String> PROJECT_IDENTIFIER =
      createField(DSL.name("project_identifier"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.project_summary_data.name</code>.
   */
  public final TableField<ProjectSummaryDataRecord, String> NAME =
      createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.project_summary_data.deployment_count</code>.
   */
  public final TableField<ProjectSummaryDataRecord, Integer> DEPLOYMENT_COUNT =
      createField(DSL.name("deployment_count"), SQLDataType.INTEGER, this, "");

  /**
   * The column <code>public.project_summary_data.build_count</code>.
   */
  public final TableField<ProjectSummaryDataRecord, Integer> BUILD_COUNT =
      createField(DSL.name("build_count"), SQLDataType.INTEGER, this, "");

  /**
   * The column <code>public.project_summary_data.feature_flags_count</code>.
   */
  public final TableField<ProjectSummaryDataRecord, Integer> FEATURE_FLAGS_COUNT =
      createField(DSL.name("feature_flags_count"), SQLDataType.INTEGER, this, "");

  /**
   * The column <code>public.project_summary_data.total_count</code>.
   */
  public final TableField<ProjectSummaryDataRecord, Integer> TOTAL_COUNT =
      createField(DSL.name("total_count"), SQLDataType.INTEGER, this, "");

  private ProjectSummaryData(Name alias, Table<ProjectSummaryDataRecord> aliased) {
    this(alias, aliased, null);
  }

  private ProjectSummaryData(Name alias, Table<ProjectSummaryDataRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.project_summary_data</code> table reference
   */
  public ProjectSummaryData(String alias) {
    this(DSL.name(alias), PROJECT_SUMMARY_DATA);
  }

  /**
   * Create an aliased <code>public.project_summary_data</code> table reference
   */
  public ProjectSummaryData(Name alias) {
    this(alias, PROJECT_SUMMARY_DATA);
  }

  /**
   * Create a <code>public.project_summary_data</code> table reference
   */
  public ProjectSummaryData() {
    this(DSL.name("project_summary_data"), null);
  }

  public <O extends Record> ProjectSummaryData(Table<O> child, ForeignKey<O, ProjectSummaryDataRecord> key) {
    super(child, key, PROJECT_SUMMARY_DATA);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public ProjectSummaryData as(String alias) {
    return new ProjectSummaryData(DSL.name(alias), this);
  }

  @Override
  public ProjectSummaryData as(Name alias) {
    return new ProjectSummaryData(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public ProjectSummaryData rename(String name) {
    return new ProjectSummaryData(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public ProjectSummaryData rename(Name name) {
    return new ProjectSummaryData(name, null);
  }

  // -------------------------------------------------------------------------
  // Row8 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row8<String, String, String, String, Integer, Integer, Integer, Integer> fieldsRow() {
    return (Row8) super.fieldsRow();
  }
}
