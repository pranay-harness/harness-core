syntax = "proto3";

package io.harness.delegate;

option java_multiple_files = true;

import "io/harness/delegate/account.proto";
import "io/harness/delegate/task.proto";
import "io/harness/delegate/progress.proto";

import "io/harness/callback/http_entrypoint.proto";
import "io/harness/callback/callback.proto";

import "io/harness/delegate/capability.proto";
import "io/harness/perpetualtask/perpetual_task.proto";
import "io/harness/perpetualtask/perpetual_task_client.proto";

service DelegateService {
  rpc RegisterCallback(RegisterCallbackRequest) returns (RegisterCallbackResponse);

  rpc SubmitTask(SubmitTaskRequest) returns (SubmitTaskResponse);
  rpc CancelTask(CancelTaskRequest) returns (CancelTaskResponse);
  rpc TaskProgress(TaskProgressRequest) returns (TaskProgressResponse);
  rpc TaskProgressUpdates(TaskProgressUpdatesRequest) returns (stream TaskProgressUpdatesResponse);

  rpc CreatePerpetualTask(CreatePerpetualTaskRequest) returns (CreatePerpetualTaskResponse);
  rpc DeletePerpetualTask(DeletePerpetualTaskRequest) returns (DeletePerpetualTaskResponse);
  rpc ResetPerpetualTask(ResetPerpetualTaskRequest) returns (ResetPerpetualTaskResponse);

  // This API is temporary to allow for querying objects from collections to allow for integration
  // before the rest of the micro services are promoted
  rpc ObtainDocument(ObtainDocumentRequest) returns (ObtainDocumentResponse);
}

message SubmitTaskRequest {
  callback.DelegateCallbackToken callback_token = 1;

  AccountId account_id = 2;

  TaskSetupAbstractions setup_abstractions = 3;
  TaskDetails details = 4;
  repeated Capability capabilities = 5;
  repeated TaskSelector selectors = 6;
}

message SubmitTaskResponse {
  TaskId task_id = 1;
}

message CancelTaskRequest {
  AccountId account_id = 1;
  TaskId task_id = 2;
}

message CancelTaskResponse {
  TaskExecutionStage canceled_at_stage = 1;
}

message TaskProgressRequest {
  AccountId account_id = 1;
  TaskId task_id = 2;
}

message TaskProgressResponse {
  TaskExecutionStage currently_at_stage = 1;
}

message TaskProgressUpdatesRequest {
  AccountId account_id = 1;
  TaskId task_id = 2;
}

message TaskProgressUpdatesResponse {
  TaskExecutionStage currently_at_stage = 1;
}

message RegisterCallbackRequest {
  callback.DelegateCallback callback = 1;
}

message RegisterCallbackResponse {
  callback.DelegateCallbackToken callback_token = 1;
}

message CreatePerpetualTaskRequest {
  AccountId account_id = 1;
  string type = 2;
  perpetualtask.PerpetualTaskSchedule schedule = 3;
  perpetualtask.PerpetualTaskClientContextDetails context = 4;
  bool allow_duplicate = 5;
  string task_description = 6;
}

message CreatePerpetualTaskResponse {
  perpetualtask.PerpetualTaskId perpetual_task_id = 1;
}

message DeletePerpetualTaskRequest {
  AccountId account_id = 1;
  perpetualtask.PerpetualTaskId perpetual_task_id = 2;
}

message DeletePerpetualTaskResponse {
}

message ResetPerpetualTaskRequest {
  AccountId account_id = 1;
  perpetualtask.PerpetualTaskId perpetual_task_id = 2;
  perpetualtask.PerpetualTaskExecutionBundle task_execution_bundle = 3;
}

message ResetPerpetualTaskResponse {
}

// Temporary {{
message Documents {
  string collection_name = 1;
  repeated string uuid = 2;
}

message ObtainDocumentRequest {
  repeated Documents documents = 1;
}

message Document {
  string collection_name = 1;
  string uuid = 2;
  bytes kryo_bytes = 3;
}

message ObtainDocumentResponse {
  repeated Document documents = 1;
}

// }}