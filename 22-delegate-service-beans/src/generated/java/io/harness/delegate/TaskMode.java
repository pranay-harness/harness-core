// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/harness/delegate/task.proto

package io.harness.delegate;

/**
 * Protobuf enum {@code io.harness.delegate.TaskMode}
 */
@javax.annotation.Generated(value = "protoc", comments = "annotations:TaskMode.java.pb.meta")
public enum TaskMode implements com
.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>MODE_UNSPECIFIED = 0;</code>
   */
  MODE_UNSPECIFIED(0),
      /**
       * <code>SYNC = 1;</code>
       */
      SYNC(1),
      /**
       * <code>ASYNC = 2;</code>
       */
      ASYNC(2), UNRECOGNIZED(-1),
      ;

  /**
   * <code>MODE_UNSPECIFIED = 0;</code>
   */
  public static final int MODE_UNSPECIFIED_VALUE = 0;
  /**
   * <code>SYNC = 1;</code>
   */
  public static final int SYNC_VALUE = 1;
  /**
   * <code>ASYNC = 2;</code>
   */
  public static final int ASYNC_VALUE = 2;

  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException("Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TaskMode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static TaskMode forNumber(int value) {
    switch (value) {
      case 0:
        return MODE_UNSPECIFIED;
      case 1:
        return SYNC;
      case 2:
        return ASYNC;
      default:
        return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TaskMode> internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<TaskMode> internalValueMap =
      new com.google.protobuf.Internal.EnumLiteMap<TaskMode>() {
        public TaskMode findValueByNumber(int number) {
          return TaskMode.forNumber(number);
        }
      };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
    return io.harness.delegate.Task.getDescriptor().getEnumTypes().get(0);
  }

  private static final TaskMode[] VALUES = values();

  public static TaskMode valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TaskMode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:io.harness.delegate.TaskMode)
}
