load("@rules_java//java:defs.bzl", "java_binary")
load("//:tools/bazel/GenTestRules.bzl", "run_package_tests")
load("//:tools/bazel/GenTestRules.bzl", "run_tests")
load("//tools/checkstyle:rules.bzl", "checkstyle")
load("//:macros.bzl", "sonarqube_test")
load("//tools/bazel/pmd:defs.bzl", "pmd")
load("//:macros.bzl", "sources")

sources()

shared_dependencies = [
    "@maven//:com_google_guava_guava",
] + [
    "//:lombok",
    "//210-command-library-xxxxxxxxmodule",
    "//230-model-test:module",
    "//280-batch-processing:module",
    "//350-event-xxxxxxxxmodule",
    "//400-rest:module",
    "//910-delegate-service-driver:module",
    "//950-delegate-tasks-beans:module",
    "//970-grpc:module",
    "@jira_client//jar",
]

java_library(
    name = "module",
    srcs = glob([
        "src/main/**/*.java",
    ]),
    data = ["//:resource"],
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@maven//:javax_ws_rs_javax_ws_rs_api",
    ],
    deps = shared_dependencies,
)

test_dependencies = shared_dependencies + [
    "@com_github_tomakehurst_wiremock//jar",
    ":module",
     "//990-commons-test:module",
    "@maven//:com_bertramlabs_plugins_hcl4j",
    "@maven//:com_icegreen_greenmail",
    "@maven//:com_openpojo_openpojo",
    "@maven//:io_github_benas_random_beans",
    "@maven//:junit_junit",
    "@maven//:org_assertj_assertj_core",
    "@maven//:org_glassfish_jersey_test_framework_providers_jersey_test_framework_provider_grizzly2",
    "@maven//:org_glassfish_jersey_test_framework_providers_jersey_test_framework_provider_inmemory",
    "@maven//:org_mockito_mockito_core",
    "@maven//:org_powermock_powermock_module_junit4",
    "@maven//:pl_pragmatists_JUnitParams",

]

#run_package_tests(
#    data = [
#        "//200-functional-test/src/test/resources:resource",
#    ],
#    resources = [
#        "//200-functional-test/src/test/resources:resource",
#    ],
#    deps = test_dependencies,
#)

run_tests()

java_library(
    name = "tests",
    srcs = glob(["src/test/**/*.java"]),
    tags = [
        "aeriform",
        "manual",
    ],
    data = [
            "//200-functional-test/src/test/resources:resource",

        ] + ["//:resource"],
        resources = [
            "//200-functional-test/src/test/resources:resource",
        ],
    visibility = ["//visibility:public"],
    deps = test_dependencies,
)

#checkstyle()

sonarqube_test(
    name = "sq_mycomponent",
    srcs = ["sources"],
    targets = [
        ":module",
    ],
)

pmd()
