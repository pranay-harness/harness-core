openapi: 3.0.3
x-stoplight:
  id: oc91t4vrfnjyi
info:
  title: Harness NextGen Software Delivery Platform API Reference
  version: '1.0'
  description: |
    The Harness Software Delivery Platform uses OpenAPI Specification v3.0. Harness constantly improves these APIs. Please be aware that some improvements could cause breaking changes.
    # Introduction 
      
      The Harness API allows you to integrate and use all the services and modules we provide on the Harness Platform. If you use client-side SDKs, Harness functionality can be integrated with your client-side automation, helping you reduce manual efforts and deploy code faster.
      
      For more information about how Harness works, read our [documentation](https://developer.harness.io/docs/getting-started) or visit the [Harness Developer Hub](https://developer.harness.io/).
      
    ## How it works
      
      The Harness API is a RESTful API that uses standard HTTP verbs. You can send requests in JSON, YAML, or form-data format. The format of the response matches the format of your request. You must send a single request at a time and ensure that you include your authentication key. For more information about this, go to [Authentication](#section/Introduction/Authentication).
    
    ## Get started
    
      Before you start integrating, get to know our API better by reading the following topics:
      
      * [Harness key concepts](https://developer.harness.io/docs/getting-started/learn-harness-key-concepts/)
      * [Authentication](#section/Introduction/Authentication)
      * [Requests and responses](#section/Introduction/Requests-and-Responses)
      * [Errors](#tag/Error-Response)
      * [Versioning](#section/Introduction/Versioning)
      * [Pagination](/#section/Introduction/Pagination)
      
      The methods you need to integrate with depend on the functionality you want to use. Work with  your Harness Solutions Engineer to determine which methods you need.
    
    ## Authentication
    
    To authenticate with the Harness API, you need to:
      1. Generate an API token on the Harness Platform.
      2. Send the API token you generate in the `x-api-key field` in each request.
    
    ### Generate an API token
    
    To generate an API token, complete the following steps:
      1. Go to the [Harness Platform](app.harness.io).
      2. On the left-hand navigation, click **My Profile**.
      3. Click **+API Key**, enter a name for your key and then click **Save**.
      4. Within the API Key tile, click **+Token**.
      5. Enter a name for your token and click **Generate Token**.
    **Important**: Make sure to save your token securely. Harness does not store the API token for future reference, so make sure to save your token securely before you leave the page.
    
    ### Send the API token in your requests
    
    Send the token you created in the Harness Platform in the x-api-key parameter. For example:
      `x-api-key: YOUR_API_KEY_HERE`
    
    ## Requests and Responses
      
      The structure for each request and response is outlined in the API documentation. We have examples in JSON and YAML for every request and response. You can use our online editor to test the examples.
            
    ## Versioning
      
      The current version of our API is **1.0**.
      
      The version number represents the core API and does not change frequently. The version number changes only if there is a significant departure from the basic underpinnings of the existing API. For example, the version number would change with a system-wide refactoring of core concepts or resources.
      This version number is represented within the API path. For example, the v1 in `api.harness.io/v1/` is the version number.
      
    ## Pagination
      
      We use pagination to place limits on the number of responses associated with list endpoints. Pagination is achieved by the use of limit query parameters. The limit defaults to 30. Its maximum value is 100.
      
      Link headers are used, which are useful for moving between pages of the overall list.
    
    For example:
      
      ```
    Link: </v1/roles?page=2&limit=30>; rel="next", </v1/roles?page=1&limit=30>; rel="self", </v1/roles?page=0&limit=30>; rel="previous",
      ```
  contact:
    name: API Support
    email: contact@harness.io
    url: 'https://harness.io/'
  x-logo:
    url: 'https://mma.prnewswire.com/media/779232/Harnes_logo_horizontal.jpg?p=facebook'
    altText: Harness
  termsOfService: 'https://harness.io/terms-of-use/'
servers:
  - url: 'https://api.harness.io'
    description: Harness host URL.
tags:
  - name: Governance Status
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/GovernanceStatus" />
  - name: Policy
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Policy" />
  - name: Policy Set
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/PolicySet" />
  - name: Governance Metadata
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/GovernanceMetadata" />
  - name: Test Error Metadata
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TestErrorMetadata" />
  - name: Error Metadata
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/ErrorMetadata" />
  - name: Field Error
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/FieldError" />
  - name: Error Response
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/ErrorResponse" />
components:
  schemas:
    GovernanceStatus:
      type: string
      title: GovernanceStatus
      x-stoplight:
        id: kh0hxoiqon3so
      enum:
        - WARNING
        - ERROR
        - PASS
      description: Governance Status
    Policy:
      title: Policy
      x-stoplight:
        id: 96ka3iug8rbc4
      type: object
      properties:
        identifier:
          type: string
          description: Policy Identifier
        name:
          type: string
          description: Policy Name
        org:
          type: string
          description: Organization identifier where the Policy is defined
        project:
          type: string
          description: Project Identifier where the Policy is defined
        evaluation_error:
          type: string
          description: Error message in Policy Evaluation
        deny_messages:
          type: array
          description: Deny messages
          items:
            type: string
        status:
          $ref: '#/components/schemas/GovernanceStatus'
      description: Contains Details about Policy
    PolicySet:
      title: PolicySet
      x-stoplight:
        id: lxrtpc1yji0pm
      type: object
      properties:
        identifier:
          type: string
          description: Identifer of the Policy Set
        name:
          type: string
          description: Name of the Policy Set
        org:
          type: string
          description: Organization Identifier where the Policy Set is defined
        project:
          type: string
          description: Project Identifier where the Policy Set is defined
        deny_messages:
          type: array
          description: Deny messages
          items:
            type: string
        status:
          $ref: '#/components/schemas/GovernanceStatus'
        policies:
          type: array
          description: List of policies defined inside Policy Set
          items:
            $ref: '#/components/schemas/Policy'
      description: Contains Policy Set Detail
    GovernanceMetadata:
      title: GovernanceMetadata
      x-stoplight:
        id: 05qhnkvljwzzm
      description: Governace Error Details
      x-discriminator-value: GovernanceMetadata
      allOf:
        - $ref: '#/components/schemas/ErrorMetadata'
        - type: object
          properties:
            deny:
              type: boolean
              description: Indicate whether the action is denied or not based on Governance rules
            message:
              type: string
              description: Governance Message
            status:
              $ref: '#/components/schemas/GovernanceStatus'
            policy_sets:
              type: array
              items:
                $ref: '#/components/schemas/PolicySet'
    TestErrorMetadata:
      title: TestErrorMetadata
      x-discriminator-value: TestErrorMetadata
      x-stoplight:
        id: mgogkf26yt2ka
      description: Test Error Metadata
      allOf:
        - $ref: '#/components/schemas/ErrorMetadata'
        - type: object
          properties:
            test:
              type: string
    ErrorMetadata:
      title: ErrorMetadata
      x-stoplight:
        id: 344dmnhe1c5kt
      discriminator:
        propertyName: type
        mapping:
          GovernanceMetadata: '#/components/schemas/GovernanceMetadata'
          TestErrorMetadata: '#/components/schemas/TestErrorMetadata'
      description: Contains more details about the error
      type: object
      properties:
        type:
          type: string
          enum:
            - GovernanceMetadata
            - TestErrorMetadata
      required:
        - type
    FieldError:
      title: FieldError
      x-stoplight:
        id: ahdrlp251yecr
      type: object
      properties:
        field_name:
          type: string
          description: Name of the field
        message:
          type: string
          description: Error message
      description: Contains Field-wise error detail
    ErrorResponse:
      title: ErrorResponse
      x-stoplight:
        id: vn5jzgz2umbw0
      type: object
      description: Contains information about the error
      properties:
        message:
          type: string
          description: Error Message
        code:
          type: string
          enum:
            - RESOURCE_NOT_FOUND
            - INVALID_ARGUMENT
          description: Error code
        errors:
          type: array
          description: Contains field-wise error detail
          items:
            $ref: '#/components/schemas/FieldError'
        error_metadata:
          $ref: '#/components/schemas/ErrorMetadata'