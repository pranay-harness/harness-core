syntax = "proto3";

package io.harness.gitsync;

option java_multiple_files = true;

import "970-ng-commons/src/main/proto/io/harness/eventsframework/schemas/entity/entity_type.proto";
import "io/harness/gitsync/change_type.proto";
import "google/protobuf/wrappers.proto";

service GitToHarnessService {
  rpc syncRequestFromGit(ChangeSet) returns (ProcessingResponse);
  rpc process(ChangeSets) returns (ProcessingResponse);
}

message ChangeSets {
  repeated ChangeSet change_set = 1;
  string account_id = 2;
}

message ChangeSet {
  string id = 1;
  string yaml = 2;
  string account_id = 3;
  io.harness.eventsframework.schemas.entity.EntityTypeProtoEnum entity_type = 4;
  google.protobuf.StringValue commit_id = 5;
  google.protobuf.StringValue object_id = 6;
  io.harness.gitsync.ChangeType change_type = 7;
}

message ProcessingResponse {
  repeated FileProcessingResponse response = 1;
  string account_id = 2;
  ProcessingFailureStage processing_failure_stage = 3;
}

message FileProcessingResponse {
  string id = 1;
  string account_id = 2;
  FileProcessingStatus status = 3;
  string error_msg = 4;
}

enum FileProcessingStatus {
  SUCCESS = 0;
  FAILURE = 1;
  SKIPPED = 2;
  // Used for internal flag for files not processed. Externally it is same as SKIPPED.
  UNPROCESSED = 3;
  // todo(abhinav): Already processed?
}

enum ProcessingFailureStage {
  RECEIVE_STAGE = 0;
  SORT_STAGE = 1;
  PROCESS_STAGE = 2;
  POST_PROCESS_STAGE = 3;
}

message GitToHarnessInfo {
  string accountIdentifier = 1;
  string yamlGitConfigOrgIdentifier = 2;
  string yamlGitConfigProjectIdentifier = 3;
  string yamlGitConfigId = 4;
  string branch = 5;
}