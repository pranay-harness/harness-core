load("@rules_java//java:defs.bzl", "java_binary")
load("//:tools/bazel/GenTestRules.bzl", "run_tests")
load("//:macros.bzl", "run_analysis")

shared_deps = [
    "@maven//:com_google_guava_guava",
    "@maven//:io_netty_netty_all",
] + [
    "//930-ng-core-clients:module",
    "//940-feature-flag:module",
    "//945-ng-audit-client:module",
    "//946-access-control-aggregator:module",
    "//946-access-control-decision:module",
    "//947-access-control-core:module",
    "//947-access-control-decision-commons:module",
    "//953-events-api:module",
    "//955-outbox-sdk:module",
    "//970-ng-commons:module",
    "//980-commons:module",
    "@maven//:com_fasterxml_jackson_jaxrs_jackson_jaxrs_yaml_provider",
    "@maven//:ru_vyarus_guice_validator",
    "//:lombok",
]

java_binary(
    name = "module",
    srcs = glob(["src/main/**/*.java"]),
    data = ["//:resource"],
    main_class = "io.harness.accesscontrol.AccessControlApplication",
    resources = [
        "//925-access-control-service/src/main/resources:resource",
    ],
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@maven//:javax_ws_rs_javax_ws_rs_api",
    ],
    deps = shared_deps,
)

java_library(
    name = "tests",
    testonly = True,
    srcs = glob(["src/test/**/*.java"]),
    visibility = ["//visibility:public"],
    deps = shared_deps + [
        ":module",
        "//960-persistence:supporter-test",
        "//990-commons-test:module",
        "@maven//:junit_junit",
        "@maven//:org_assertj_assertj_core",
        "@maven//:org_mockito_mockito_core",
    ],
)

run_tests()

run_analysis()

#Docker Build Config
load(
    "@io_bazel_rules_docker//container:container.bzl",
    "container_image",
    "container_push",
)

load("@io_bazel_rules_docker//docker/package_managers:download_pkgs.bzl", "download_pkgs")
load("@io_bazel_rules_docker//docker/package_managers:install_pkgs.bzl", "install_pkgs")
load("@io_bazel_rules_docker//docker/util:run.bzl", "container_run_and_commit")

container_image(
    name = "docker_image",
    base = "@base_image//image",
    files = ["config.yml", "keystore.jks", "accesscontrol-service-capsule.jar", "docker/scripts"],
)

container_run_and_commit(
    name = "access_control_docker_image",
    commands = [
        "wget https://github.com/mikefarah/yq/releases/download/3.3.2/yq_linux_amd64 -O /usr/bin/yq -O /usr/bin/yq",
        "chmod +x /usr/bin/yq",
        "mv accesscontrol-service-capsule.jar /opt/harness",
        "mv keystore.jks /opt/harness",
        "mv config.yml /opt/harness",
        "cp scripts/* /opt/harness",
        "chmod +x /opt/harness/*.sh",
        "mkdir /opt/harness/plugins",
        "addgroup -S 65534 && adduser -S 65534 -G 65534",
        "chown -R 65534:65534 /opt/harness/ /tmp",
        "chmod 700 -R /opt/harness/",
        "chmod 700 -R /tmp",
    ],
    image = ":docker_image.tar",
)

container_run_and_commit(
    name = "access_control_docker_image_gcr",
    commands = [
        "wget https://github.com/mikefarah/yq/releases/download/3.3.2/yq_linux_amd64 -O /usr/bin/yq -O /usr/bin/yq",
        "chmod +x /usr/bin/yq",
        "mv accesscontrol-service-capsule.jar /opt/harness",
        "mv keystore.jks /opt/harness",
        "mv config.yml /opt/harness",
        "cp scripts/* /opt/harness",
        "chmod +x /opt/harness/*.sh",
        "mkdir /opt/harness/plugins",
    ],
    image = ":docker_image.tar",
)

container_image(
    name = "access_control_docker_image_final",
    base = "access_control_docker_image_commit.tar",
    user= "65534",
    workdir = "/opt/harness",
    cmd = "./run.sh",
)

container_image(
    name = "access_control_docker_image_gcr_final",
    base = "access_control_docker_image_gcr_commit.tar",
    workdir = "/opt/harness",
    cmd = "./run.sh",
)