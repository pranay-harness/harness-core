harnessApiVersion: '1.0'
type: OTHER
commandUnitType: COMMAND
commandUnits:
- command: |
    sudo docker pull harness/manager:${workflow.variables.MANAGER_VERSION}

    sudo docker run --net=host -d --rm --name harnessManager -e LOGGING_LEVEL=${serviceVariable.LOGGING_LEVEL} -e MEMORY=${serviceVariable.MEMORY} -e WATCHER_METADATA_URL=${serviceVariable.WATCHER_METADATA_URL} -e NEWRELIC_LICENSE_KEY=${serviceVariable.NEWRELIC_LICENSE_KEY} -e ALLOWED_ORIGINS=${serviceVariable.ALLOWED_ORIGINS} -e CAPSULE_JAR=${serviceVariable.CAPSULE_JAR} -e NEWRELIC_ENV=${serviceVariable.NEWRELIC_ENV} -e DELEGATE_METADATA_URL=${serviceVariable.DELEGATE_METADATA_URL} -e GRAPHITE_PREFIX=${serviceVariable.GRAPHITE_PREFIX} -e GRAPHITE_SERVER=${serviceVariable.GRAPHITE_SERVER} -e MANCENTER_URL=${serviceVariable.MANCENTER_URL} -e HZ_CLUSTER_NAME=${serviceVariable.HZ_CLUSTER_NAME} -e SERVER_PORT=${serviceVariable.SERVER_PORT} -e UI_SERVER_URL=${serviceVariable.UI_SERVER_URL} -e MONGO_URI='${serviceVariable.MONGO_URI}' -e DEPLOY_MODE=${serviceVariable.DEPLOY_MODE} -e TCP_HOSTS_DETAILS=${serviceVariable.TCP_HOSTS_DETAILS} -e CIDR=127.0.0.1 -e API_URL=${serviceVariable.API_URL} -e HAZELCAST_PORT=${serviceVariable.HAZELCAST_PORT} -e jwtPasswordSecret=${serviceVariable.jwtPasswordSecret} -e jwtExternalServiceSecret=${serviceVariable.jwtExternalServiceSecret} -e jwtZendeskSecret=${serviceVariable.jwtZendeskSecret} -e jwtMultiAuthSecret=${serviceVariable.jwtMultiAuthSecret} -e jwtSsoRedirectSecret=${serviceVariable.jwtSsoRedirectSecret} -e FEATURES=${serviceVariable.FEATURES} -e  LOGDNA_KEY=${serviceVariable.LOGDNA_KEY} -p  ${serviceVariable.SERVER_PORT}:9090 -p ${serviceVariable.HAZELCAST_PORT}:${serviceVariable.HAZELCAST_PORT} -v `pwd`/logs:/opt/harness/logs  harness/manager:${workflow.variables.MANAGER_VERSION}
  commandUnitType: EXEC
  deploymentType: SSH
  name: Run Docker manager
  scriptType: BASH
  workingDirectory: ${WINGS_RUNTIME_PATH}
- command: |-
    echo "Sleeping for 30 s"
    sleep 30

    sudo docker inspect -f {{.State.Running}} harnessManager
  commandUnitType: EXEC
  deploymentType: SSH
  name: Check Harness Manager is running
  scriptType: BASH
  workingDirectory: ${WINGS_RUNTIME_PATH}
- command: echo "Checking if server has started correctly"
  commandUnitType: EXEC
  deploymentType: SSH
  name: Check if server started successfully
  scriptType: BASH
  workingDirectory: ${WINGS_RUNTIME_PATH}
targetToAllEnv: true
