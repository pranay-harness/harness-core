package io.harness.accesscontrol.acl.resources;

import static io.harness.exception.WingsException.USER;

import io.harness.accesscontrol.HUserPrincipal;
import io.harness.accesscontrol.acl.services.ACLService;
import io.harness.accesscontrol.clients.AccessCheckRequestDTO;
import io.harness.accesscontrol.clients.AccessCheckResponseDTO;
import io.harness.exception.AccessDeniedException;
import io.harness.ng.core.dto.ErrorDTO;
import io.harness.ng.core.dto.FailureDTO;
import io.harness.ng.core.dto.ResponseDTO;
import io.harness.security.SecurityContextBuilder;
import io.harness.security.annotations.NextGenManagerAuth;
import io.harness.security.dto.Principal;
import io.harness.security.dto.PrincipalType;

import com.google.inject.Inject;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import java.util.Objects;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import lombok.AllArgsConstructor;

@Path("/acl")
@Api("/acl")
@Produces({"application/json", "application/yaml"})
@Consumes({"application/json", "application/yaml"})
@ApiResponses(value =
    {
      @ApiResponse(code = 400, response = FailureDTO.class, message = "Bad Request")
      , @ApiResponse(code = 500, response = ErrorDTO.class, message = "Internal server error")
    })
@AllArgsConstructor(onConstructor = @__({ @Inject }))
@NextGenManagerAuth
public class ACLResource {
  private final ACLService aclService;

  @POST
  @ApiOperation(value = "Check for access to resources", nickname = "getAccessControlList")
  public ResponseDTO<AccessCheckResponseDTO> get(@Valid @NotNull AccessCheckRequestDTO dto) {
    Principal principalInContext = SecurityContextBuilder.getPrincipal();
    io.harness.accesscontrol.Principal principalInBody = dto.getPrincipal();

    if (principalInContext == null || principalInContext.getType() == null) {
      throw new AccessDeniedException("Missing valid principal in context, cannot be null/empty", USER);
    }

    if (principalInBody == null) {
      if (principalInContext.getType() == PrincipalType.USER) {
        dto.setPrincipal(HUserPrincipal.builder()
                             .principalType(io.harness.accesscontrol.principals.PrincipalType.USER)
                             .principalIdentifier(principalInContext.getName())
                             .build());
      } else {
        throw new AccessDeniedException(
            "Missing principal in body for a request generated by principal of type " + principalInContext.getType(),
            USER);
      }
    }

    if (PrincipalType.USER.equals(principalInContext.getType())
        && !Objects.equals(principalInContext.getName(), dto.getPrincipal().getPrincipalIdentifier())) {
      throw new AccessDeniedException(String.format("This is an escalated call, principal %s is not allowed to"
                                              + " check access control for principal %s",
                                          principalInContext.getName(), dto.getPrincipal().getPrincipalIdentifier()),
          USER);
    }
    return ResponseDTO.newResponse(aclService.get(dto));
  }
}
