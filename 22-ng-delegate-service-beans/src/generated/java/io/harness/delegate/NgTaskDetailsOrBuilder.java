// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/harness/delegate/ng_task.proto

package io.harness.delegate;

@javax.annotation.Generated(value = "protoc", comments = "annotations:NgTaskDetailsOrBuilder.java.pb.meta")
public interface NgTaskDetailsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.harness.delegate.NgTaskDetails)
    com.google.protobuf.MessageOrBuilder {
  /**
   * <code>.io.harness.delegate.NgTaskMode mode = 1[json_name = "mode"];</code>
   * @return The enum numeric value on the wire for mode.
   */
  int getModeValue();
  /**
   * <code>.io.harness.delegate.NgTaskMode mode = 1[json_name = "mode"];</code>
   * @return The mode.
   */
  io.harness.delegate.NgTaskMode getMode();

  /**
   * <code>.io.harness.delegate.NgTaskType type = 2[json_name = "type"];</code>
   * @return Whether the type field is set.
   */
  boolean hasType();
  /**
   * <code>.io.harness.delegate.NgTaskType type = 2[json_name = "type"];</code>
   * @return The type.
   */
  io.harness.delegate.NgTaskType getType();
  /**
   * <code>.io.harness.delegate.NgTaskType type = 2[json_name = "type"];</code>
   */
  io.harness.delegate.NgTaskTypeOrBuilder getTypeOrBuilder();

  /**
   * <code>bytes kryo_parameters = 3[json_name = "kryoParameters"];</code>
   * @return The kryoParameters.
   */
  com.google.protobuf.ByteString getKryoParameters();

  /**
   * <code>.google.protobuf.Duration execution_timeout = 4[json_name = "executionTimeout"];</code>
   * @return Whether the executionTimeout field is set.
   */
  boolean hasExecutionTimeout();
  /**
   * <code>.google.protobuf.Duration execution_timeout = 4[json_name = "executionTimeout"];</code>
   * @return The executionTimeout.
   */
  com.google.protobuf.Duration getExecutionTimeout();
  /**
   * <code>.google.protobuf.Duration execution_timeout = 4[json_name = "executionTimeout"];</code>
   */
  com.google.protobuf.DurationOrBuilder getExecutionTimeoutOrBuilder();

  /**
   * <code>map&lt;string, string&gt; expressions = 5[json_name = "expressions"];</code>
   */
  int getExpressionsCount();
  /**
   * <code>map&lt;string, string&gt; expressions = 5[json_name = "expressions"];</code>
   */
  boolean containsExpressions(java.lang.String key);
  /**
   * Use {@link #getExpressionsMap()} instead.
   */
  @java.lang.Deprecated java.util.Map<java.lang.String, java.lang.String> getExpressions();
  /**
   * <code>map&lt;string, string&gt; expressions = 5[json_name = "expressions"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String> getExpressionsMap();
  /**
   * <code>map&lt;string, string&gt; expressions = 5[json_name = "expressions"];</code>
   */

  java.lang.String getExpressionsOrDefault(java.lang.String key, java.lang.String defaultValue);
  /**
   * <code>map&lt;string, string&gt; expressions = 5[json_name = "expressions"];</code>
   */

  java.lang.String getExpressionsOrThrow(java.lang.String key);

  /**
   * <code>int64 expression_functor_token = 6[json_name = "expressionFunctorToken"];</code>
   * @return The expressionFunctorToken.
   */
  long getExpressionFunctorToken();

  public io.harness.delegate.NgTaskDetails.ParametersCase getParametersCase();
}
