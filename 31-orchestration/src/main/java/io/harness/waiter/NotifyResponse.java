package io.harness.waiter;

import io.harness.annotation.HarnessEntity;
import io.harness.beans.ExecutionStatus;
import io.harness.delegate.beans.ResponseData;
import io.harness.persistence.CreatedAtAccess;
import io.harness.persistence.PersistentEntity;
import io.harness.persistence.UuidAccess;
import lombok.Builder;
import lombok.Value;
import lombok.experimental.FieldNameConstants;
import org.mongodb.morphia.annotations.Entity;
import org.mongodb.morphia.annotations.Id;
import org.mongodb.morphia.annotations.IndexOptions;
import org.mongodb.morphia.annotations.Indexed;

import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Date;

/**
 * Represents response generated by a correlationId.
 */
@Value
@Builder
@FieldNameConstants(innerTypeName = "NotifyResponseKeys")
@Entity(value = "notifyResponses", noClassnameStored = true)
@HarnessEntity(exportable = false)
public class NotifyResponse<T extends ResponseData> implements PersistentEntity, UuidAccess, CreatedAtAccess {
  public static final Duration TTL = WaitQueue.TTL.plusDays(7);

  @Id private String uuid;
  @Indexed private long createdAt;

  private T response;

  private boolean error;

  private Date expiryTs;

  private ExecutionStatus status = ExecutionStatus.NEW;

  @Indexed(options = @IndexOptions(expireAfterSeconds = 0))
  private Date validUntil = Date.from(OffsetDateTime.now().plus(TTL).toInstant());
}
