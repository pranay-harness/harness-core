// Copyright 2020 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.

// Code generated by MockGen. DO NOT EDIT.
// Source: minio.go

// Package minio is a generated GoMock package.
package minio

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	minio "github.com/minio/minio-go/v6"
	reflect "reflect"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// UploadWithOpts mocks base method.
func (m *MockClient) UploadWithOpts(ctx context.Context, key, filePath string, metadata map[string]string, isStandardRedundancy bool, partSize uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadWithOpts", ctx, key, filePath, metadata, isStandardRedundancy, partSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadWithOpts indicates an expected call of UploadWithOpts.
func (mr *MockClientMockRecorder) UploadWithOpts(ctx, key, filePath, metadata, isStandardRedundancy, partSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadWithOpts", reflect.TypeOf((*MockClient)(nil).UploadWithOpts), ctx, key, filePath, metadata, isStandardRedundancy, partSize)
}

// Upload mocks base method.
func (m *MockClient) Upload(ctx context.Context, key, filePath string, opts minio.PutObjectOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, key, filePath, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockClientMockRecorder) Upload(ctx, key, filePath, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockClient)(nil).Upload), ctx, key, filePath, opts)
}

// Download mocks base method.
func (m *MockClient) Download(ctx context.Context, key, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, key, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *MockClientMockRecorder) Download(ctx, key, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockClient)(nil).Download), ctx, key, filePath)
}

// Stat mocks base method.
func (m *MockClient) Stat(key string) (string, map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(map[string]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Stat indicates an expected call of Stat.
func (mr *MockClientMockRecorder) Stat(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockClient)(nil).Stat), key)
}
