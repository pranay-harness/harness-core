// Copyright 2020 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.

// Code generated by MockGen. DO NOT EDIT.
// Source: artifactory.go

// Package jfrogutils is a generated GoMock package.
package jfrogutils

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockArtifactory is a mock of Artifactory interface.
type MockArtifactory struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactoryMockRecorder
}

// MockArtifactoryMockRecorder is the mock recorder for MockArtifactory.
type MockArtifactoryMockRecorder struct {
	mock *MockArtifactory
}

// NewMockArtifactory creates a new mock instance.
func NewMockArtifactory(ctrl *gomock.Controller) *MockArtifactory {
	mock := &MockArtifactory{ctrl: ctrl}
	mock.recorder = &MockArtifactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactory) EXPECT() *MockArtifactoryMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockArtifactory) Upload(ctx context.Context, srcFilePattern, targetRepositoryPath, artifactoryURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, srcFilePattern, targetRepositoryPath, artifactoryURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockArtifactoryMockRecorder) Upload(ctx, srcFilePattern, targetRepositoryPath, artifactoryURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockArtifactory)(nil).Upload), ctx, srcFilePattern, targetRepositoryPath, artifactoryURL)
}
