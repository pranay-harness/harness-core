// Copyright 2020 Harness Inc. All rights reserved.
// Use of this source code is governed by the PolyForm Free Trial 1.0.0 license
// that can be found in the licenses directory at the root of this repository, also available at
// https://polyformproject.org/wp-content/uploads/2020/05/PolyForm-Free-Trial-1.0.0.txt.

// Code generated by MockGen. DO NOT EDIT.
// Source: archive.go

// Package archive is a generated GoMock package.
package archive

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockArchiver is a mock of Archiver interface.
type MockArchiver struct {
	ctrl     *gomock.Controller
	recorder *MockArchiverMockRecorder
}

// MockArchiverMockRecorder is the mock recorder for MockArchiver.
type MockArchiverMockRecorder struct {
	mock *MockArchiver
}

// NewMockArchiver creates a new mock instance.
func NewMockArchiver(ctrl *gomock.Controller) *MockArchiver {
	mock := &MockArchiver{ctrl: ctrl}
	mock.recorder = &MockArchiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchiver) EXPECT() *MockArchiverMockRecorder {
	return m.recorder
}

// Archive mocks base method.
func (m *MockArchiver) Archive(srcFilePaths []string, dstFilePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Archive", srcFilePaths, dstFilePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Archive indicates an expected call of Archive.
func (mr *MockArchiverMockRecorder) Archive(srcFilePaths, dstFilePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*MockArchiver)(nil).Archive), srcFilePaths, dstFilePath)
}

// Unarchive mocks base method.
func (m *MockArchiver) Unarchive(filename, dstPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unarchive", filename, dstPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unarchive indicates an expected call of Unarchive.
func (mr *MockArchiverMockRecorder) Unarchive(filename, dstPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unarchive", reflect.TypeOf((*MockArchiver)(nil).Unarchive), filename, dstPath)
}
