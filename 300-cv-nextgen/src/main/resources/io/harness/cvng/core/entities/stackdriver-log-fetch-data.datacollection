Var authTokenUrl = "https://www.googleapis.com/oauth2/v4/token"
Var authBodyMap = {}
Var:authBodyMap.put("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer")
Var:authBodyMap.put("assertion",Env:jwtToken)

Var bearerTokenResponse = sync-call(url=Var:authTokenUrl,body=Var:authBodyMap, bodyType=FORM_URL_ENCODED)
Var token = extract(Var:bearerTokenResponse, $.access_token)

Var header = {}
Var headerVal = concat("Bearer ", Var:token)
Var:header.put("Authorization", Var:headerVal)

Var myEndTime = time-to-string(Env:endTimeMillis)
Var myStartTime = time-to-string(Env:startTimeMillis)
Var queryFilter = concat("timestamp >= \"", Var:myStartTime, "\" AND timestamp <= \"", Var:myEndTime, "\" AND ", Env:query)

Var body = {}
Var projects = []
Var:projects.append(Env:project)
Var:body.put("projectIds", Var:projects)
Var:body.put("filter", Var:queryFilter)
Var:body.put("pageSize", "10000")
Var:body.put("orderBy", "timestamp desc")

Var url = concat(Env:baseUrl, "entries:list")

Var logsResponse = sync-call(url=Var:url, header=Var:header, body=Var:body)
Var logs = extract(Var:logsResponse, $.entries)

Var responseList = []

foreach log in Var:logs {
  Var message = extract(Var:log, Env:messageField)
  Var host = extract(Var:log, Env:hostField)
  Var timestamp = extract(Var:log, $.timestamp)
  Var timeStampVal = string-to-time(Var:timestamp)

  Var logToReturn = new LogDataRecord(log=Var:message, timestamp=Var:timeStampVal, host=Var:host)
  Var:responseList.append(Var:logToReturn)
}

return Var:responseList