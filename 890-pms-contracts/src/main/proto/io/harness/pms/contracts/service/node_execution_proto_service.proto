syntax = "proto3";

package io.harness.pms.contracts.plan;

option java_multiple_files = true;

import "io/harness/pms/contracts/execution/failure/failure_info.proto";
import "io/harness/pms/contracts/execution/tasks/task_request.proto";
import "io/harness/pms/contracts/execution/executable_response.proto";
import "io/harness/pms/contracts/execution/node_execution_proto.proto";
import "io/harness/pms/contracts/execution/status.proto";
import "io/harness/pms/contracts/steps/io/step_response_proto.proto";
import "io/harness/pms/contracts/facilitators/facilitators.proto";
import "io/harness/pms/contracts/advisers/advise.proto";
import "io/harness/pms/contracts/service/node_execution_event.proto";

service NodeExecutionProtoService {
  rpc queueTask(QueueTaskRequest) returns (QueueTaskResponse);
  rpc accumulateResponses(AccumulateResponsesRequest) returns (AccumulateResponsesResponse);
}

message QueueTaskRequest {
  string nodeExecutionId = 1;
  map<string, string> setupAbstractions = 3;
  io.harness.pms.contracts.execution.tasks.TaskRequest taskRequest = 4;
}

message QueueTaskResponse {
  string taskId = 1;
}

message AccumulateResponsesRequest {
  string planExecutionId = 1;
  string notifyId = 2;
}

message AccumulateResponsesResponse {
  map<string, bytes> response = 1;
}
