syntax = "proto3";

package io.harness.pms.contracts.plan;

option java_multiple_files = true;

import "io/harness/pms/contracts/plan/plan_node_proto.proto";
import "io/harness/pms/contracts/plan/graph_layout.proto";
import "io/harness/pms/contracts/ambiance/trigger_info.proto";

service PlanCreationService {
  rpc createPlan(PlanCreationBlobRequest) returns (PlanCreationBlobResponse);
  rpc createFilter(FilterCreationBlobRequest) returns (FilterCreationBlobResponse);
}

message PlanCreationBlobRequest {
  map<string, YamlFieldBlob> dependencies = 1;
  map<string, PlanCreationContextValue> context = 4;
}

message PlanCreationBlobResponse {
  map<string, PlanNodeProto> nodes = 1;
  map<string, YamlFieldBlob> dependencies = 2;
  string startingNodeId = 3;
  map<string, PlanCreationContextValue> context = 4;
  GraphLayoutInfo graphLayoutInfo = 5;
}

message GraphLayoutInfo {
  string startingNodeId = 1;
  map<string, GraphLayoutNode> layoutNodes = 2;
}

message PlanCreationContextValue {
  oneof value {
    string stringValue = 1;
    io.harness.pms.contracts.ambiance.ExecutionTriggerInfo executionTriggerInfo = 2;
  }
}

message YamlFieldBlob {
  string name = 1;
  bytes blob = 2;
}

message FilterCreationBlobRequest {
  map<string, YamlFieldBlob> dependencies = 1;
}

message FilterCreationBlobResponse {
  string filter = 1;
  uint32 stageCount = 2;
  map<string, YamlFieldBlob> dependencies = 3;
  map<string, YamlFieldBlob> resolvedDependencies = 4;
  string startingNodeId = 6;
}
