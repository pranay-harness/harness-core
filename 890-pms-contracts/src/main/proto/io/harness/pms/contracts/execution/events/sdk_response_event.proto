syntax = "proto3";

package io.harness.pms.contracts.execution.events;
import "io/harness/pms/contracts/execution/tasks/task_request.proto";
import "io/harness/pms/contracts/execution/node_execution_proto.proto";
import "io/harness/pms/contracts/execution/status.proto";
import "io/harness/pms/contracts/execution/executable_response.proto";
import "io/harness/pms/contracts/steps/io/step_response_proto.proto";
import "io/harness/pms/contracts/facilitators/facilitators.proto";
import "io/harness/pms/contracts/service/node_execution_event.proto";
import "io/harness/pms/contracts/execution/failure/failure_info.proto";
import "io/harness/pms/contracts/advisers/advise.proto";

option java_multiple_files = true;

message SdkResponseEventProto {
  SdkResponseEventType sdkResponseEventType = 1;
  SdkResponseEventRequest sdkResponseEventRequest = 2;
}

message SdkResponseEventRequest {
  oneof request {
    QueueTaskRequest queueTaskRequest = 1;
    AddExecutableResponseRequest addExecutableResponseRequest = 4;
    HandleStepResponseRequest handleStepResponseRequest = 5;
    ResumeNodeExecutionRequest resumeNodeExecutionRequest = 6;
    FacilitatorResponseRequest facilitatorResponseRequest = 7;
    EventErrorRequest eventErrorRequest = 8;
    AdviserResponseRequest adviserResponseRequest = 9;
    SuspendChainRequest suspendChainRequest = 11;
    SpawnChildRequest spawnChildRequest = 12;
    SpawnChildrenRequest spawnChildrenRequest = 13;
    HandleProgressRequest progressRequest = 14;
  }
  string nodeExecutionId = 3;
}

message FacilitatorResponseRequest {
  string nodeExecutionId = 1;
  string notifyId = 2;
  io.harness.pms.contracts.facilitators.FacilitatorResponseProto facilitatorResponse = 3;
}

message AddExecutableResponseRequest {
  string nodeExecutionId = 1;
  io.harness.pms.contracts.execution.Status status = 2;
  io.harness.pms.contracts.execution.ExecutableResponse executableResponse = 3;
  repeated string callbackIds = 4;
}

message HandleStepResponseRequest {
  string nodeExecutionId = 1;
  steps.io.StepResponseProto stepResponse = 2;
}

message ResumeNodeExecutionRequest {
  string nodeExecutionId = 1;
  map<string, bytes> response = 2;
  bool asyncError = 3;
}

message EventErrorRequest {
  io.harness.pms.contracts.plan.NodeExecutionEventType eventType = 1;
  string eventNotifyId = 2;
  execution.failure.FailureInfo failureInfo = 3;
}

message AdviserResponseRequest {
  string nodeExecutionId = 1;
  string notifyId = 2;
  io.harness.pms.contracts.advisers.AdviserResponse adviserResponse = 3;
}

message SuspendChainRequest {
  string nodeExecutionId = 1;
  io.harness.pms.contracts.execution.ExecutableResponse executableResponse = 2;
  map<string, bytes> response = 3;
  bool isError = 4;
}

message SpawnChildRequest {
  string planExecutionId = 1;
  string nodeExecutionId = 2;
  oneof spawnableExecutableResponse {
    io.harness.pms.contracts.execution.ChildExecutableResponse child = 3;
    io.harness.pms.contracts.execution.ChildChainExecutableResponse childChain = 4;
  }
}

message SpawnChildrenRequest {
  string planExecutionId = 1;
  string nodeExecutionId = 2;
  io.harness.pms.contracts.execution.ChildrenExecutableResponse children = 3;
}

message QueueTaskRequest {
  string nodeExecutionId = 1;
  io.harness.pms.contracts.execution.ExecutableResponse executableResponse = 2;
  io.harness.pms.contracts.execution.Status status = 3;
  map<string, string> setupAbstractions = 4;
  io.harness.pms.contracts.execution.tasks.TaskRequest taskRequest = 5;
}

message HandleProgressRequest {
  string planExecutionId = 1;
  string nodeExecutionId = 2;
  string progressJson = 3;
}

enum SdkResponseEventType {
  UNKNOWN_EVENT_TYPE = 0;
  ADD_EXECUTABLE_RESPONSE = 2;
  HANDLE_STEP_RESPONSE = 3;
  RESUME_NODE_EXECUTION = 4;
  HANDLE_FACILITATE_RESPONSE = 5;
  HANDLE_EVENT_ERROR = 6;
  HANDLE_ADVISER_RESPONSE = 7;
  SUSPEND_CHAIN = 9;
  SPAWN_CHILD = 10;
  QUEUE_TASK = 11;
  SPAWN_CHILDREN = 12;
  HANDLE_PROGRESS = 13;
}