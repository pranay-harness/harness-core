<mongoChangeLog>
    <changeSet changeId="base-user-references" author="peeyushaggarwal">
        <script>
            migrateUserFunction = function(collection,doc) {
              var updateData = {};
              if(doc.createdBy != null &amp;&amp; typeof doc.createBy == "string") {
                 var user = db.users.find({"_id": doc.createdBy})[0] || {};
                 updateData["createdBy"] = { "uuid": doc.createdBy, "email": user["email"], "name": user["name"] };
              }
              if(doc.lastUpdatedBy != null &amp;&amp; typeof doc.lastUpdatedBy == "string") {
                var user = db.users.find({"_id": doc.lastUpdatedBy})[0] || {};
                updateData["lastUpdatedBy"] = { "uuid": doc.lastUpdatedBy, "email": user["email"], "name": user["name"] };
              }
              if(updateData["createdBy"] != null || updateData["lastUpdatedBy"] != null) {
                collection.update({ "_id": doc["_id"]}, { "$set": updateData});
              }
            };
            db.applications.find().forEach(migrateUserFunction.bind(null, db.applications));
            db.activities.find().forEach(migrateUserFunction.bind(null, db.activities));
            db.appContainers.find().forEach(migrateUserFunction.bind(null, db.appContainers));
            db.applicationHosts.find().forEach(migrateUserFunction.bind(null, db.applicationHosts));
            db.artifacts.find().forEach(migrateUserFunction.bind(null, db.artifacts));
            db.authTokens.find().forEach(migrateUserFunction.bind(null, db.authTokens));
            db.commandLogs.find().forEach(migrateUserFunction.bind(null, db.commandLogs));
            db.configFiles.find().forEach(migrateUserFunction.bind(null, db.configFiles));
            db.emailVerificationTokens.find().forEach(migrateUserFunction.bind(null, db.emailVerificationTokens));
            db.environments.find().forEach(migrateUserFunction.bind(null, db.environments));
            db.history.find().forEach(migrateUserFunction.bind(null, db.history));
            db.notifications.find().forEach(migrateUserFunction.bind(null, db.notifications));
            db.orchestrations.find().forEach(migrateUserFunction.bind(null, db.orchestrations));
            db.pipelines.find().forEach(migrateUserFunction.bind(null, db.pipelines));
            db.releases.find().forEach(migrateUserFunction.bind(null, db.releases));
            db.roles.find().forEach(migrateUserFunction.bind(null, db.roles));
            db.serviceInstance.find().forEach(migrateUserFunction.bind(null, db.serviceInstance));
            db.serviceVariables.find().forEach(migrateUserFunction.bind(null, db.serviceVariables));
            db.services.find().forEach(migrateUserFunction.bind(null, db.services));
            db.settingAttributes.find().forEach(migrateUserFunction.bind(null, db.settingAttributes));
            db.tags.find().forEach(migrateUserFunction.bind(null, db.tags));
            db.users.find().forEach(migrateUserFunction.bind(null, db.users));
            db.workflowExecutions.find().forEach(migrateUserFunction.bind(null, db.workflowExecutions));
            db.hosts.find().forEach(migrateUserFunction.bind(null, db.hosts));
            db.audits.find().forEach(migrateUserFunction.bind(null, db.audits));
            db.infrastructure.find().forEach(migrateUserFunction.bind(null, db.infrastructure));
            db.phases.find().forEach(migrateUserFunction.bind(null, db.phases));
            db.serviceTemplates.find().forEach(migrateUserFunction.bind(null, db.serviceTemplates));
            db.stateMachines.find().forEach(migrateUserFunction.bind(null, db.stateMachines));
            db.locks.find().forEach(migrateUserFunction.bind(null, db.locks));
            db.executionEvents.find().forEach(migrateUserFunction.bind(null, db.executionEvents));
            db.stateExecutionInstances.find().forEach(migrateUserFunction.bind(null, db.stateExecutionInstances));
            db.notifyResponses.find().forEach(migrateUserFunction.bind(null, db.notifyResponses));
            db.waitInstances.find().forEach(migrateUserFunction.bind(null, db.waitInstances));
            db.waitInstanceErrors.find().forEach(migrateUserFunction.bind(null, db.waitInstanceErrors));
            db.waitQueues.find().forEach(migrateUserFunction.bind(null, db.waitQueues));
        </script>
    </changeSet>
</mongoChangeLog>
