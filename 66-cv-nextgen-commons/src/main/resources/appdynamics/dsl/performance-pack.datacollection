Var tierDetailsUrl = concat(Env:baseUrl, "rest/applications/", Env:appId, "/tiers/", Env:tierId, "?output=json")
Var tierDetail = sync-call(url=Var:tierDetailsUrl, header=Env:commonHeaders)
Var tierName = "test"
foreach tier in Var:tierDetail {
  tierName = extract(Var:tier,$.name)
}

Var btUrl = concat(Env:baseUrl, "rest/applications/", Env:appId, "/metrics?output=JSON&metric-path=Business Transaction Performance|Business Transactions|")
btUrl = concat(Var:btUrl, Var:tierName)
Var btList = sync-call(url=Var:btUrl, header=Env:commonHeaders)

Var metricDataUrl = concat(Env:baseUrl, "rest/applications/", Env:appId, "/metric-data?output=JSON&time-range-type=BETWEEN_TIMES&rollup=false&start-time=", Env:startTimeMillis, "&end-time=", Env:endTimeMillis, "&metric-path=")
Var metricRequests = []
foreach metricDefinition in Env:metricsToCollect {
  foreach bt in Var:btList {
    Var btName = extract(Var:bt,$.name)
    Var metricPath = concat("", Var:metricDefinition)
    Var:metricPath.replaceAll("__tier_name__", Var:tierName)
    Var:metricPath.replaceAll("__group_name__", Var:btName)
    Var metricCall = concat(Var:metricDataUrl, Var:metricPath)
    Request metricRequest = new Request(url=Var:metricCall, header=Env:commonHeaders)
    Var:metricRequests.append(Var:metricRequest)
  }
}
Var metrics = execute-parallel(Var:metricRequests)

Var metricsToReturn = []
foreach metricArr in Var:metrics {
  foreach metric in Var:metricArr {
    Var metricName = extract(Var:metric,$.metricName)
    if Var:metricName != "METRIC DATA NOT FOUND" {
      Var metricPath = extract(Var:metric,$.metricPath)
      Var metricPathSplit = Var:metricPath.split("|")
      Var txnName = Var:metricPathSplit[3]
      Var mName = Var:metricPathSplit[4]

      Var metricValues = extract(Var:metric,$.metricValues)
      foreach metricValue in Var:metricValues {
        Var value = extract(Var:metricValue,$.value)
        Var timestamp = extract(Var:metricValue,$.startTimeInMillis)
        Var tsRecord = new TimeseriesRecord(txnName=Var:txnName, metricName=Var:mName, metricValue=Var:value, timestamp=Var:timestamp)
        Var:metricsToReturn.append(Var:tsRecord)
      }
    }
  }
}
return Var:metricsToReturn
