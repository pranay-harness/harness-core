package io.harness.serializer.morphia;

import io.harness.mongo.MorphiaRegistrar;
import software.wings.api.CanaryWorkflowStandardParams;
import software.wings.api.CommandStateExecutionData;
import software.wings.api.CommandStepExecutionSummary;
import software.wings.api.HttpStateExecutionData;
import software.wings.api.InstanceElement;
import software.wings.api.PhaseElement;
import software.wings.api.PhaseExecutionData;
import software.wings.api.PhaseStepExecutionData;
import software.wings.api.ScriptStateExecutionData;
import software.wings.api.SelectedNodeExecutionData;
import software.wings.api.ServiceInstanceIdsParam;
import software.wings.api.jira.JiraExecutionData;
import software.wings.api.shellscript.provision.ShellScriptProvisionExecutionData;
import software.wings.beans.AwsConfig;
import software.wings.beans.AzureConfig;
import software.wings.beans.BambooConfig;
import software.wings.beans.BasicOrchestrationWorkflow;
import software.wings.beans.BuildWorkflow;
import software.wings.beans.CanaryOrchestrationWorkflow;
import software.wings.beans.CanaryWorkflowExecutionAdvisor;
import software.wings.beans.DockerConfig;
import software.wings.beans.GcpConfig;
import software.wings.beans.HostConnectionAttributes;
import software.wings.beans.JenkinsConfig;
import software.wings.beans.JiraConfig;
import software.wings.beans.KubernetesClusterConfig;
import software.wings.beans.PhysicalDataCenterConfig;
import software.wings.beans.SSHExecutionCredential;
import software.wings.beans.ServiceNowConfig;
import software.wings.beans.StringValue;
import software.wings.beans.alert.GitSyncErrorAlert;
import software.wings.beans.alert.SSOSyncFailedAlert;
import software.wings.beans.artifact.ArtifactFile;
import software.wings.beans.command.Command;
import software.wings.beans.command.CopyConfigCommandUnit;
import software.wings.beans.command.DownloadArtifactCommandUnit;
import software.wings.beans.command.EcsSetupCommandUnit;
import software.wings.beans.command.ExecCommandUnit;
import software.wings.beans.command.KubernetesResizeCommandUnit;
import software.wings.beans.command.KubernetesSetupCommandUnit;
import software.wings.beans.command.PortCheckClearedCommandUnit;
import software.wings.beans.command.PortCheckListeningCommandUnit;
import software.wings.beans.command.ProcessCheckRunningCommandUnit;
import software.wings.beans.command.ProcessCheckStoppedCommandUnit;
import software.wings.beans.command.ResizeCommandUnit;
import software.wings.beans.command.ScpCommandUnit;
import software.wings.beans.command.SetupEnvCommandUnit;
import software.wings.beans.config.ArtifactoryConfig;
import software.wings.beans.config.NexusConfig;
import software.wings.beans.template.command.HttpTemplate;
import software.wings.beans.template.command.ShellScriptTemplate;
import software.wings.beans.template.command.SshCommandTemplate;
import software.wings.beans.trigger.ArtifactCondition;
import software.wings.beans.trigger.WebHookTriggerCondition;
import software.wings.beans.trigger.WorkflowAction;
import software.wings.collect.ArtifactCollectionCallback;
import software.wings.delegatetasks.buildsource.BuildSourceCallback;
import software.wings.delegatetasks.buildsource.BuildSourceCleanupCallback;
import software.wings.delegatetasks.buildsource.BuildSourceExecutionResponse;
import software.wings.helpers.ext.external.comm.CollaborationProviderResponse;
import software.wings.helpers.ext.mail.SmtpConfig;
import software.wings.security.EnvFilter;
import software.wings.security.GenericEntityFilter;
import software.wings.security.WorkflowFilter;
import software.wings.security.encryption.SimpleEncryption;
import software.wings.service.impl.WorkflowExecutionUpdate;
import software.wings.service.impl.email.EmailNotificationCallBack;
import software.wings.service.impl.event.AlertEvent;
import software.wings.service.impl.event.timeseries.TimeSeriesEventInfo;
import software.wings.sm.ElementNotifyResponseData;
import software.wings.sm.StateExecutionData;
import software.wings.sm.StateMachineResumeCallback;
import software.wings.sm.states.ApprovalState;
import software.wings.sm.states.ArtifactCheckState;
import software.wings.sm.states.AwsNodeSelectState;
import software.wings.sm.states.CommandState;
import software.wings.sm.states.EnvState;
import software.wings.sm.states.HttpState;
import software.wings.sm.states.HttpState.HttpStateExecutionResponse;
import software.wings.sm.states.JenkinsState;
import software.wings.sm.states.PhaseStepSubWorkflow;
import software.wings.sm.states.PhaseSubWorkflow;
import software.wings.sm.states.RepeatState;
import software.wings.sm.states.RepeatState.RepeatStateExecutionData;
import software.wings.sm.states.ShellScriptState;
import software.wings.sm.states.collaboration.JiraCreateUpdate;
import software.wings.sm.states.k8s.K8sCanaryDeploy;
import software.wings.sm.states.k8s.K8sDelete;
import software.wings.sm.states.k8s.K8sRollingDeploy;
import software.wings.sm.states.k8s.K8sRollingDeployRollback;
import software.wings.sm.states.provision.ShellScriptProvisionState;

import java.util.Map;

public class ManagerMorphiaRegistrar implements MorphiaRegistrar {
  @Override
  public void register(Map<String, Class> map) {
    map.put(wingsPackage + "api.CanaryWorkflowStandardParams", CanaryWorkflowStandardParams.class);
    map.put(wingsPackage + "api.HttpStateExecutionData", HttpStateExecutionData.class);
    map.put(wingsPackage + "api.PhaseElement", PhaseElement.class);
    map.put(wingsPackage + "api.PhaseExecutionData", PhaseExecutionData.class);
    map.put(wingsPackage + "api.PhaseStepExecutionData", PhaseStepExecutionData.class);
    map.put(wingsPackage + "api.ScriptStateExecutionData", ScriptStateExecutionData.class);
    map.put(wingsPackage + "api.SelectedNodeExecutionData", SelectedNodeExecutionData.class);
    map.put(wingsPackage + "api.SelectNodeStepExecutionSummary", ApprovalState.class);
    map.put(wingsPackage + "api.ServiceInstanceIdsParam", ServiceInstanceIdsParam.class);
    map.put(wingsPackage + "api.shellscript.provision.ShellScriptProvisionExecutionData",
        ShellScriptProvisionExecutionData.class);
    map.put(wingsPackage + "artifact.ArtifactFile", ArtifactFile.class);
    map.put(wingsPackage + "beans.alert.GitSyncErrorAlert", GitSyncErrorAlert.class);
    map.put(wingsPackage + "beans.alert.SSOSyncFailedAlert", SSOSyncFailedAlert.class);
    map.put(wingsPackage + "beans.artifact.ArtifactFile", ArtifactFile.class);
    map.put(wingsPackage + "beans.AwsConfig", AwsConfig.class);
    map.put(wingsPackage + "beans.AzureConfig", AzureConfig.class);
    map.put(wingsPackage + "beans.BasicOrchestrationWorkflow", BasicOrchestrationWorkflow.class);
    map.put(wingsPackage + "beans.BuildWorkflow", BuildWorkflow.class);
    map.put(wingsPackage + "beans.CanaryOrchestrationWorkflow", CanaryOrchestrationWorkflow.class);
    map.put(wingsPackage + "beans.CanaryWorkflowExecutionAdvisor", CanaryWorkflowExecutionAdvisor.class);
    map.put(wingsPackage + "beans.command.Command", Command.class);
    map.put(wingsPackage + "beans.command.CopyConfigCommandUnit", CopyConfigCommandUnit.class);
    map.put(wingsPackage + "beans.command.DownloadArtifactCommandUnit", DownloadArtifactCommandUnit.class);
    map.put(wingsPackage + "beans.command.EcsSetupCommandUnit", EcsSetupCommandUnit.class);
    map.put(wingsPackage + "beans.command.ExecCommandUnit", ExecCommandUnit.class);
    map.put(wingsPackage + "beans.command.KubernetesResizeCommandUnit", KubernetesResizeCommandUnit.class);
    map.put(wingsPackage + "beans.command.KubernetesSetupCommandUnit", KubernetesSetupCommandUnit.class);
    map.put(wingsPackage + "beans.command.PortCheckClearedCommandUnit", PortCheckClearedCommandUnit.class);
    map.put(wingsPackage + "beans.command.PortCheckListeningCommandUnit", PortCheckListeningCommandUnit.class);
    map.put(wingsPackage + "beans.command.ProcessCheckRunningCommandUnit", ProcessCheckRunningCommandUnit.class);
    map.put(wingsPackage + "beans.command.ProcessCheckStoppedCommandUnit", ProcessCheckStoppedCommandUnit.class);
    map.put(wingsPackage + "beans.command.ResizeCommandUnit", ResizeCommandUnit.class);
    map.put(wingsPackage + "beans.command.ScpCommandUnit", ScpCommandUnit.class);
    map.put(wingsPackage + "beans.command.SetupEnvCommandUnit", SetupEnvCommandUnit.class);
    map.put(wingsPackage + "beans.config.ArtifactoryConfig", ArtifactoryConfig.class);
    map.put(wingsPackage + "beans.config.NexusConfig", NexusConfig.class);
    map.put(wingsPackage + "beans.DockerConfig", DockerConfig.class);
    map.put(wingsPackage + "beans.GcpConfig", GcpConfig.class);
    map.put(wingsPackage + "beans.HostConnectionAttributes", HostConnectionAttributes.class);
    map.put(wingsPackage + "beans.JenkinsConfig", JenkinsConfig.class);
    map.put(wingsPackage + "beans.JiraConfig", JiraConfig.class);
    map.put(wingsPackage + "beans.KubernetesClusterConfig", KubernetesClusterConfig.class);
    map.put(wingsPackage + "beans.PhysicalDataCenterConfig", PhysicalDataCenterConfig.class);
    map.put(wingsPackage + "beans.ServiceNowConfig", ServiceNowConfig.class);
    map.put(wingsPackage + "beans.SSHExecutionCredential", SSHExecutionCredential.class);
    map.put(wingsPackage + "beans.StringValue", StringValue.class);
    map.put(wingsPackage + "beans.template.command.HttpTemplate", HttpTemplate.class);
    map.put(wingsPackage + "beans.template.command.SshCommandTemplate", SshCommandTemplate.class);
    map.put(wingsPackage + "beans.trigger.ArtifactCondition", ArtifactCondition.class);
    map.put(wingsPackage + "beans.trigger.WebHookTriggerCondition", WebHookTriggerCondition.class);
    map.put(wingsPackage + "beans.trigger.WorkflowAction", WorkflowAction.class);
    map.put(wingsPackage + "collect.ArtifactCollectionCallback", ArtifactCollectionCallback.class);
    map.put(wingsPackage + "delegatetasks.buildsource.BuildSourceCallback", BuildSourceCallback.class);
    map.put(wingsPackage + "delegatetasks.buildsource.BuildSourceCleanupCallback", BuildSourceCleanupCallback.class);
    map.put(
        wingsPackage + "delegatetasks.buildsource.BuildSourceExecutionResponse", BuildSourceExecutionResponse.class);
    map.put(
        wingsPackage + "helpers.ext.external.comm.CollaborationProviderResponse", CollaborationProviderResponse.class);
    map.put(wingsPackage + "helpers.ext.mail.SmtpConfig", SmtpConfig.class);
    map.put(wingsPackage + "security.encryption.SimpleEncryption", SimpleEncryption.class);
    map.put(wingsPackage + "security.EnvFilter", EnvFilter.class);
    map.put(wingsPackage + "security.GenericEntityFilter", GenericEntityFilter.class);
    map.put(wingsPackage + "security.WorkflowFilter", WorkflowFilter.class);
    map.put(wingsPackage + "service.impl.email.EmailNotificationCallBack", EmailNotificationCallBack.class);
    map.put(wingsPackage + "service.impl.event.AlertEvent", AlertEvent.class);
    map.put(wingsPackage + "service.impl.event.timeseries.TimeSeriesEventInfo", TimeSeriesEventInfo.class);
    map.put(wingsPackage + "service.impl.WorkflowExecutionUpdate", WorkflowExecutionUpdate.class);
    map.put(wingsPackage + "sm.ElementNotifyResponseData", ElementNotifyResponseData.class);
    map.put(wingsPackage + "sm.StateExecutionData", StateExecutionData.class);
    map.put(wingsPackage + "sm.StateMachineResumeCallback", StateMachineResumeCallback.class);
    map.put(wingsPackage + "sm.states.ApprovalState", ApprovalState.class);
    map.put(wingsPackage + "sm.states.ArtifactCheckState", ArtifactCheckState.class);
    map.put(wingsPackage + "sm.states.AwsNodeSelectState", AwsNodeSelectState.class);
    map.put(wingsPackage + "sm.states.CommandState", CommandState.class);
    map.put(wingsPackage + "sm.states.HttpState", HttpState.class);
    map.put(wingsPackage + "sm.states.HttpState$HttpStateExecutionResponse", HttpStateExecutionResponse.class);
    map.put(wingsPackage + "sm.states.JenkinsState", JenkinsState.class);
    map.put(wingsPackage + "sm.states.k8s.K8sCanaryDeploy", K8sCanaryDeploy.class);
    map.put(wingsPackage + "sm.states.k8s.K8sDelete", K8sDelete.class);
    map.put(wingsPackage + "sm.states.k8s.K8sRollingDeploy", K8sRollingDeploy.class);
    map.put(wingsPackage + "sm.states.k8s.K8sRollingDeployRollback", K8sRollingDeployRollback.class);
    map.put(wingsPackage + "sm.states.PhaseStepSubWorkflow", PhaseStepSubWorkflow.class);
    map.put(wingsPackage + "sm.states.PhaseSubWorkflow", PhaseSubWorkflow.class);
    map.put(wingsPackage + "sm.states.provision.ShellScriptProvisionState", ShellScriptProvisionState.class);
    map.put(wingsPackage + "sm.states.RepeatState", RepeatState.class);

    map.put(wingsPackage + "sm.states.collaboration.JiraCreateUpdate", JiraCreateUpdate.class);
    map.put(wingsPackage + "api.jira.JiraExecutionData", JiraExecutionData.class);
    map.put(wingsPackage + "api.InstanceElement", InstanceElement.class);
    map.put(wingsPackage + "api.CommandStateExecutionData", CommandStateExecutionData.class);
    map.put(wingsPackage + "sm.states.RepeatState$RepeatStateExecutionData", RepeatStateExecutionData.class);
    map.put(wingsPackage + "beans.template.command.ShellScriptTemplate", ShellScriptTemplate.class);
    map.put(wingsPackage + "api.CommandStepExecutionSummary", CommandStepExecutionSummary.class);
    map.put(wingsPackage + "sm.states.ShellScriptState", ShellScriptState.class);
    map.put(wingsPackage + "beans.BambooConfig", BambooConfig.class);
    map.put(wingsPackage + "sm.states.EnvState", EnvState.class);
  }
}
