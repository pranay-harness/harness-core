name: "Install IIS Website"
gallery: "Harness"
folderPath: "Harness/Power Shell Commands"
version: "1"
description: "This is a command to install service by invoking scripts over SSH to the individual instances."
keywords: [ssh, iiswebsite, powershell, install]
referencedTemplateUri: "Harness/Power Shell Commands/Install IIS Website:1"
variables:
  - name: "ReleaseNo"
    description: "ReleaseId."
  - name: "ServiceName"
    description: "Service Name"
  - name: "AppPoolName"
    value: "DefaultAppPool"
    description: "Default Application Pool"
  - name: "AppPoolDotNetVersion"
    value: "v4.0"
    description: "Application pool DotNet Version"
  - name: "DownloadDirectory"
    value: "$env:TEMP"
    description: "Download Directory"
  - name: "AppPhysicalDirectory"
    value: "$env:SYSTEMDRIVE"
    description: "App Physical Base Directory"
  - name: "SiteProtocol"
    value: "http"
    description: "Site Protocol"
  - name: "SitePort"
    value: "80"
    description: "Site Port"
  - name: "SiteHostName"
    value: "*"
    description: "Site Host Name"

templateObject:
  type: "SSH"
  commandType: "INSTALL"
  commands:
    - commandUnitType: DOWNLOAD_ARTIFACT
      deploymentType: SSH
      name: Download Artifact
      scriptType: POWERSHELL
      workingDirectory: ${DownloadDirectory}
    - command: |-
        $serviceName="${ServiceName}"
        $releaseId="${serviceVariable.ReleaseNo}"
        $artifactFilename = "${DownloadDirectory}" + "\" + "${artifact.fileName}"
        $appPhysicalDirectory="${AppPhysicalDirectory}" + "\Artifacts\" + $serviceName + "\release-" + $releaseId

        # Check if artifact is File or Folder structure
        $isFile = Test-Path -Path $artifactFilename -PathType Leaf
        $isFolder = Test-Path -Path $artifactFilename -PathType Container
         if ($isFile -and ([IO.Path]::GetExtension($artifactFilename) -eq ".zip" ))
        {
            Write-Host "Extracting package from" $artifactFilename "to" $appPhysicalDirectory
            Expand-Archive -Path $artifactFilename -DestinationPath $appPhysicalDirectory -Force
        }
        else
        {
            Write-Host "Artifact type is not a zip file. Skipping extract."
        }
        if ($isFolder)
        {
            Write-Host "Copying folder from" $artifactFilename "to" $appPhysicalDirectory
            Copy-Item -Path $artifactFilename -Filter "*.*" -Recurse -Destination $appPhysicalDirectory -Container
        }
        Write-Host "Done."
      commandUnitType: EXEC
      deploymentType: SSH
      name: Expand Artifacts
      scriptType: POWERSHELL
    - commandUnitType: COPY_CONFIGS
      deploymentType: SSH
      name: Copy Configs
      destinationParentPath: ${DownloadDirectory}
    - command: |-
        $releaseId="${workflow.ReleaseNo}"
        $serviceName="${ServiceName}"
        $appPhysicalDirectory="${AppPhysicalDirectory}" + "\Artifacts\" + $serviceName + "\release-" + $releaseId

        # Copy configs to application directory
        $userProfile = "$env:userprofile"
        Copy-Item -Path "$userProfile\\${app.name}\\${serviceName}\\${env.name}\\runtime\\*.config" -Destination $appPhysicalDirectory -Force

        Import-Module WebAdministration

        $AppPoolName = "${AppPoolName}"
        $AppPoolDotNetVersion = "${AppPoolDotNetVersion}"

        if (!(Test-Path IIS:\AppPools\$AppPoolName -pathType container))
        {
            Write-Host "Creating AppPool:" $AppPoolName
            $appPool = New-Item IIS:\AppPools\$AppPoolName
        }
        else
        {
            Write-Host "Updating AppPool:" $AppPoolName
            $appPool = Get-Item IIS:\AppPools\$AppPoolName
        }

        $appPool | Set-ItemProperty -Name "managedRuntimeVersion" -Value $AppPoolDotNetVersion

        Get-Item IIS:\AppPools\$AppPoolName | ft
        Write-Host "Done."
      commandUnitType: EXEC
      deploymentType: SSH
      name: Create AppPool
      scriptType: POWERSHELL
    - command: |-
        Import-Module WebAdministration

        $releaseId="${serviceVariable.ReleaseNo}"
        $SiteName = "${ServiceName}"
        $SitePhysicalDirectory = "${AppPhysicalDirectory}" + "\Artifacts\" + $SiteName + "\release-" + $releaseId
        $AppPoolName = "${AppPoolName}"

        if (!(Test-Path IIS:\Sites\$SiteName -pathType container))
        {
            $site = New-Item IIS:\Sites\$SiteName -physicalPath $sitePhysicalDirectory -bindings @{protocol="${SiteProtocol}";bindingInformation=":"+ "${SitePort}" +":"+ "${SiteHostName}"} -ApplicationPool $AppPoolName -AutoStart $true
            Write-Host "Created Website:" $SiteName
        }
        else
        {
            $site = Get-Item IIS:\Sites\$SiteName
            $Site | Set-ItemProperty -Name "physicalPath" -Value $sitePhysicalDirectory
            $Site | Set-ItemProperty -Name "bindings" -Value @{protocol="${SiteProtocol}";bindingInformation=":"+ "${SitePort}" +":"+ "${SiteHostName}"}
            Write-Host "Updated Website:" $SiteName
        }

        Start-WebSite $SiteName
        Get-Item IIS:\Sites\$SiteName
        Write-Host "Done."
      commandUnitType: EXEC
      deploymentType: SSH
      name: Create Website
      scriptType: POWERSHELL