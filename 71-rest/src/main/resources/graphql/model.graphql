extend type Query {
  # Get details about an application
  application(applicationId: String!): Application @dataFetcher(name: application)

  # Asking accountId temporarily because there is no auth support as of now.
  # Will remove it once authentication is available
  applications(accountId: String!, limit: Int!, offset: Int): ApplicationConnection
    @dataFetcher(name: applicationConnection)

  # Get details about an environment
  environment(environmentId: String!): Environment @dataFetcher(name: environment)

  environments(applicationId: String!, limit: Int!, offset: Int): EnvironmentConnection
    @dataFetcher(name: environmentConnection)

  # Get a pipeline object by ID
  pipeline(pipelineId: String!): Pipeline @dataFetcher(name: pipeline)

  pipelines(applicationId: String!, limit: Int!, offset: Int): PipelineConnection
    @dataFetcher(name: pipelineConnection)

  # Get workflow object by ID
  workflow(workflowId: String!): Workflow @dataFetcher(name: workflow)

  # Get list of workflows for an applicationId. It will return paginated data
  workflows(applicationId: String!, limit: Int!, offset: Int): WorkflowConnection
    @dataFetcher(name: workflowConnection)
}

type Application {
  id: String
  name: String
  description: String
  createdAt: DateTime
  createdBy: User

  services(limit: Int!, offset: Int): ServiceConnection
    @dataFetcher(name: serviceConnection, contextFieldArgsMap: "{ \"applicationId\": \"id\"}")

  workflows(limit: Int!, offset: Int): WorkflowConnection
    @dataFetcher(name: workflowConnection, contextFieldArgsMap: "{ \"applicationId\": \"id\"}")

  pipelines(limit: Int!, offset: Int): PipelineConnection
    @dataFetcher(name: pipelineConnection, contextFieldArgsMap: "{ \"applicationId\": \"id\"}")
}

type ApplicationConnection {
  pageInfo: PageInfo
  nodes: [Application]
}

enum EnvironmentType {
  PROD
  NON_PROD
}

type Environment {
  id: String
  name: String
  description: String
  type: EnvironmentType
  instances(limit: Int!, offset: Int): InstanceConnection
    @dataFetcher(name: instancesByEnvironment, contextFieldArgsMap: "{ \"environmentId\": \"id\"}")
}

type EnvironmentConnection {
  pageInfo: PageInfo
  nodes: [Environment]
}

# Type for pipeline
type Pipeline {
  # Pipeline Id
  id: String

  # Name of the pipeline
  name: String

  # Description of the pipeline
  description: String

  executions(limit: Int!, offset: Int, statuses: [ExecutionStatus], from: DateTime, to: DateTime): ExecutionConnection
    @dataFetcher(name: executionConnectionForPipeline, contextFieldArgsMap: "{ \"pipelineId\": \"id\"}")
}

type PipelineConnection {
  pageInfo: PageInfo
  nodes: [Pipeline]
}

# Type workflow
type Workflow {
  # Workflow ID
  id: String

  # Name of the workflow
  name: String

  # Description of the workflow
  description: String

  executions(limit: Int!, offset: Int, statuses: [ExecutionStatus], from: DateTime, to: DateTime): ExecutionConnection
    @dataFetcher(name: executionConnectionForWorkflow, contextFieldArgsMap: "{ \"workflowId\": \"id\"}")
}

type WorkflowConnection {
  pageInfo: PageInfo
  nodes: [Workflow]
}

# Service Type
type Service {
  # Service ID
  id: String
  # Name of the service
  name: String
  # Description of the Service
  description: String
  # Artifact type deployed by this service
  artifactType: String
  # Deployment Type SSH, Helm, Kubernetes
  deploymentType: String

  executions(limit: Int!, offset: Int, statuses: [ExecutionStatus], from: DateTime, to: DateTime): ExecutionConnection
    @dataFetcher(name: executionConnectionForService, contextFieldArgsMap: "{ \"serviceId\": \"id\"}")

  instances(limit: Int!, offset: Int): InstanceConnection
    @dataFetcher(name: instancesByService, contextFieldArgsMap: "{ \"serviceId\": \"id\"}")
}

type ServiceConnection {
  pageInfo: PageInfo
  nodes: [Service]
}
