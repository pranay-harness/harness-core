directive @dataFetcher(name : String!, contextFieldArgsMap: String, batchLoader: String) on FIELD_DEFINITION

schema {
  query: Query
}

# Harness GraphQL SDL details
type Query {
  # Get a pipeline object by id
  pipeline(pipelineId: String!): Pipeline @dataFetcher(name : "pipeline")

  pipelines(appId: String, limit: Int, offset: Int): PipelineConnection @dataFetcher(name : "pipelineConnection")

    # Get the workflow details for a specific appId and workflow Id
  workflow(appId: String!, workflowId: String!): Workflow   @dataFetcher(name : "workflow")

  # Get list of workflows for an appId. It will return paginated data
  workflows(appId: String!, limit: Int, offset: Int): PagedData  @dataFetcher(name : "workflows")

  # Get the execution status of a workflow
  workflowExecution(workflowId: String!, appId: String!, serviceId: String, envId: String) : WorkflowExecution  @dataFetcher(name : "workflowExecution")

  # Get the list of workflow execution status for a particular workflowId, envId and appId.  It will return Paginated data.
  workflowExecutions(workflowId: String!, appId: String!, envId: String!, limit: Int, offset: Int): PagedData  @dataFetcher(name : "workflowExecutions")

  # Get list of successfully deployed articacts.
  deployedArtifacts(appId: String!, envId: String!, serviceId: String!): [Artifact]  @dataFetcher(name : "artifact")

  # Get details about an application
  application(appId:String!): Application @dataFetcher(name : "application")

  #Asking accountID temporarily because there is no auth support as of now. Will remove it once authentication is available
  applications(accountId:String!): PagedData  @dataFetcher(name : "applications")

  # Get details about an environment
  environment(appId: String!, envId: String! ): Environment  @dataFetcher(name : "environment")

  # Get page data of environments
  environments(appId: String!, environmentType: String,limit: Int, offset: Int): PagedData  @dataFetcher(name : "environments")
}

# DateTime which will return date based on PST zone
scalar DateTime
scalar Object

interface BaseInfo {
  debugInfo: String
}

type PageInfo {
  hasMore : Boolean
  total: Int
  offset : Int
  limit : Int
}

# Type for pipeline
type Pipeline {
  # Pipeline Id
  id: String

  # Name of the pipeline
  name: String

  # Description of the pipeline
  description: String
}

type PipelineConnection {
  pageInfo : PageInfo
  nodes : [Pipeline]
}

# Type for workflow Execution
type WorkflowExecution implements BaseInfo {
  # Workflow Execution Id
  id: String

  # Name of the workflow
  name: String

  # Status of the workflow
  status: String

  # DateTime when execution started
  startTime: DateTime

  # DateTime when execution ended
  endTime: DateTime

  # Debug info useful to troubleshoot issues
  debugInfo: String
}

# Type workflow
type Workflow implements BaseInfo {
  # Workflow Id
  id: String

  # Name of the workflow
  name: String

  # Workflow type PIPELINE or ORCHESTRATION
  workflowType: String

  # Description of the workflow
  description: String

  # Flag whether this workflow is templatized
  templatized: Boolean

  # Services associated with the workflow
  services: [Service]

  environment: Environment  @dataFetcher(name : "environment", contextFieldArgsMap: "{ \"appId\": \"appId\", \"envId\": \"envId\"}")

  # Debug info useful to troubleshoot issues
  debugInfo: String

}

# Service Type
type Service {
   # Name of the service
   name: String
   # Description of the Service
   description: String
   # Artifact type deployed by this service
   artifactType: String
   # Deployment Type SSH, Helm, Kubernetes
   deploymentType: String
}

# Type for returning paged data
type PagedData {
  # Total number of entries matching the result
  total: Int
  # offset of current page data
  offset: Int
  # limit of current page data
  limit: Int
  # Data returned
  data: [Result]
  # Debug info useful to troubleshoot issues
  debugInfo: String
}

# Union for Workflow and Workflow Execution
union Result = Workflow | WorkflowExecution | Application | Environment

# Aritifact type
type Artifact implements BaseInfo {
    # Artifact Id
    id: String
    # Source of the artifact Docker Jenkins
    sourceName: String
    # Display name of the artifact
    displayName: String
    # Build number of the artifiact
    buildNo: String
    # Workflow that successfully deployed it last
    workflowExecutionName: String
    # Pipeline that successfully deployed it last
    pipelineflowExecutionName: String
    # DateTime when artifact was last successfully last
    lastDeployedAt: DateTime
    # Last User who deployed successfully this artifact
    lastDeployedBy: String
    # Debug info useful to troubleshoot issues
    debugInfo: String
    # Application of the artifact
    application: Application @dataFetcher(name : "application", contextFieldArgsMap: "{ \"appId\": \"appId\"}", batchLoader: "application")
}

type Application implements BaseInfo {
  id: String
  name : String
  description : String
  # Debug info useful to troubleshoot issues
  debugInfo: String
  # Workflows within an application
  workflows: PagedData  @dataFetcher(name : "workflows", contextFieldArgsMap: "{ \"appId\": \"id\"}")
}

type Environment implements BaseInfo {
  id: String
  name : String
  description : String
  environmentType: String
  # Debug info useful to troubleshoot issues
  debugInfo: String
}