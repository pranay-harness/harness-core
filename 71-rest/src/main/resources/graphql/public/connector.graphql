extend type Query {
  # Get details about connector
  connector(connectorId: String!): Connector @dataFetcher(name: connector)

  connectors(filters: [ConnectorFilter], limit: Int!, offset: Int): ConnectorConnection
    @dataFetcher(name: connectorConnection)
}

input ConnectorFilter {
  connector: IdFilter
  connectorType: ConnectorTypeFilter
  createdAt: TimeFilter
}

input ConnectorTypeFilter {
  operator: EnumOperator
  values: [ConnectorType]
}

enum ConnectorType {
  JIRA
  SLACK
  SMTP
  SERVICENOW
  DOCKER
}

interface Connector {
  id: String
  name: String
  description: String
  createdAt: DateTime
  createdBy: User
}

type ConnectorConnection {
  pageInfo: PageInfo
  nodes: [Connector]
}

type JiraConnector implements Connector {
  id: String
  name: String
  description: String
  createdAt: DateTime
  createdBy: User
}

type SlackConnector implements Connector {
  id: String
  name: String
  description: String
  createdAt: DateTime
  createdBy: User
}

type SmtpConnector implements Connector {
  id: String
  name: String
  description: String
  createdAt: DateTime
  createdBy: User
}

type ServiceNowConnector implements Connector {
  id: String
  name: String
  description: String
  createdAt: DateTime
  createdBy: User
}

type DockerConnector implements Connector {
  id: String
  name: String
  description: String
  createdAt: DateTime
  createdBy: User
}
