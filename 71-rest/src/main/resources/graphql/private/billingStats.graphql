extend type Query {
  billingStatsTimeSeries(
    limit: Int
    includeOthers: Boolean
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
    sortCriteria: [BillingSortCriteria]
  ): BillingStackedTimeSeriesData @dataFetcher(name: billingStatsTimeSeries)

  gcpBillingTimeSeriesStats(
    filters: [CCMFilter]
    aggregateFunction: CCMAggregationFunction
    groupBy: [CCMGroupBy]
  ): GcpBillingTimeSeriesStats @dataFetcher(name: gcpBillingTimeSeriesStats)

  billingTrendStats(
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
  ): BillingStatsData @dataFetcher(name: billingTrendStats)

  gcpBillingTrendStats(filters: [CCMFilter]): BillingStatsData @dataFetcher(name: gcpBillingTrendStats)

  idleCostTrendStats(
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
  ): IdleCostStatsData @dataFetcher(name: idleCostTrendStats)

  billingStatsEntity(
    limit: Int
    offset: Int
    includeOthers: Boolean
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
    sortCriteria: [BillingSortCriteria]
  ): BillingEntityData @dataFetcher(name: billingStatsEntity)

  gcpBillingEntityData(
    filters: [CloudBillingFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CloudGroupBy]
  ): GcpBillingEntityData @dataFetcher(name: gcpBillingEntityStats)

  billingStatsFilterValues(
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
    sortCriteria: [BillingSortCriteria]
  ): BillingFilterData @dataFetcher(name: billingStatsFilterValues)

  efficiencyStats(
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
  ): EfficiencyStatsData @dataFetcher(name: efficiencyStats)

  sunburstChartStats(
    limit: Int
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
    sortCriteria: [BillingSortCriteria]
  ): SunburstChartData @dataFetcher(name: sunburstChartStats)

  nodeAndPodDetails(
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
    sortCriteria: [BillingSortCriteria]
  ): NodeAndPodData @dataFetcher(name: nodeAndPodDetails)
}

input CCMAggregationFunction {
  operationType: CCMAggregateOperation
  columnName: String
}

enum CCMAggregateOperation {
  SUM
  MAX
  AVG
}

input CCMGroupBy {
  entityGroupBy: CCMEntityGroupBy
  timeTruncGroupby: CETimeTruncGroupby
  timeAggregation: CCMTimeSeriesAggregation
  tagAggregation: BillingDataTagAggregation
  labelAggregation: BillingDataLabelAggregation
}

enum CCMEntityGroupBy {
  Application
  Service
  Cluster
  StartTime
  Environment
  Region
  CloudServiceName
  TaskId
  InstanceType
  LaunchType
  WorkloadName
  WorkloadType
  Namespace
  ClusterType
  ClusterName
  CloudProvider
  PROJECT
  Node
  Pod
}

input CETimeTruncGroupby {
  resolution: TimeGroupType
}

input CCMTimeSeriesAggregation {
  timeGroupType: TimeGroupType
}

enum TimeGroupType {
  DAY
  MONTH
}

input BillingDataTagAggregation {
  entityType: BillingDataTagType
  tagName: String
}

input BillingDataLabelAggregation {
  name: String
}

input BillingSortCriteria {
  sortType: BillingSortType
  sortOrder: SortOrder
}

enum BillingSortType {
  Time
  Amount
  IdleCost
}

type BillingEntityDataPoint {
  id: String
  name: String
  type: String
  totalCost: Number
  idleCost: Number
  cpuIdleCost: Number
  memoryIdleCost: Number
  costTrend: Number
  trendType: String
  region: String
  launchType: String
  cloudServiceName: String
  workloadName: String
  workloadType: String
  namespace: String
  clusterType: String
  clusterId: String
  label: String
  totalNamespaces: Number
  totalWorkloads: Number
  maxCpuUtilization: Number
  maxMemoryUtilization: Number
  avgCpuUtilization: Number
  avgMemoryUtilization: Number
  unallocatedCost: Number
}

type GcpBillingEntityDataPoint {
  id: String
  name: String
  projectNumber: String
  totalCost: Number
  discounts: Number
  subTotal: Number
  productType: String
  usage: String
  region: String
}

type GcpBillingEntityData {
  data: [GcpBillingEntityDataPoint]
}

type SunburstChartData {
  data: [SunburstChartDataPoint]
  gridData: [SunburstGridDataPoint]
}

type SunburstChartDataPoint {
  id: String
  parent: String
  name: String
  type: String
  value: Number
  clusterType: String
  instanceType: String
  metadata: SunburstGridDataPoint
}

type SunburstGridDataPoint {
  id: String
  name: String
  type: String
  trend: Number
  value: Number
  efficiencyScore: Number
}

type BillingEntityData {
  data: [BillingEntityDataPoint]
}

type BillingFilterDataPoint {
  cloudServiceNames: [EntityData]
  taskIds: [EntityData]
  launchTypes: [EntityData]
  workloadNames: [EntityData]
  namespaces: [EntityData]
  cloudProviders: [EntityData]
  applications: [EntityData]
  environments: [EntityData]
  services: [EntityData]
  clusters: [EntityData]
  instances: [EntityData]
  k8sLabels: [K8sLabel]
}

type EntityData {
  name: String
  id: String
  type: String
}

type BillingFilterData {
  data: [BillingFilterDataPoint]
}

type BillingStatsData {
  totalCost: BillingStatsInfo
  costTrend: BillingStatsInfo
  forecastCost: BillingStatsInfo
  idleCost: BillingStatsInfo
  utilizedCost: BillingStatsInfo
  unallocatedCost: BillingStatsInfo
}

type EfficiencyStatsData {
  context: ContextInfo
  efficiencyBreakdown: StatsBreakdownInfo
  resourceBreakdown: [ResourceStatsInfo]
}

type IdleCostStatsData {
  totalIdleCost: BillingStatsInfo
  cpuIdleCost: BillingStatsInfo
  memoryIdleCost: BillingStatsInfo
  unallocatedCost: BillingStatsInfo
}

type BillingStackedTimeSeriesData {
  data: [BillingStackedTimeSeriesDataPoint]
  cpuIdleCost: [BillingStackedTimeSeriesDataPoint]
  memoryIdleCost: [BillingStackedTimeSeriesDataPoint]
  cpuUtilMetrics: [BillingStackedTimeSeriesDataPoint]
  memoryUtilMetrics: [BillingStackedTimeSeriesDataPoint]
  label: String
}

type GcpBillingTimeSeriesStats {
  stats: [TimeSeriesDataPoints]
}

type TimeSeriesDataPoints {
  values: [DataPoint]
  time: DateTime
}

type BillingStackedTimeSeriesDataPoint {
  values: [BillingDataPoint]
  time: DateTime
}

type BillingDataPoint {
  key: Reference # Key refers to the label
  value: Number
}

type BillingStatsInfo {
  statsLabel: String
  statsDescription: String
  statsValue: String
}

type ContextInfo {
  efficiencyScore: Number
  contextName: String
  totalCost: Number
  totalCostDescription: String
}

type StatsBreakdownInfo {
  total: Number
  utilized: Number
  idle: Number
  unallocated: Number
}

type ResourceStatsInfo {
  type: String
  info: StatsBreakdownInfo
}

input CCMFilter {
  application: IdFilter
  service: IdFilter
  environment: IdFilter
  cluster: IdFilter
  cloudServiceName: IdFilter
  launchType: IdFilter
  taskId: IdFilter
  namespace: IdFilter
  workloadName: IdFilter
  startTime: TimeFilter
  endTime: TimeFilter
  cloudProvider: IdFilter
  tag: BillingDataTagFilter
  label: BillingDataLabelFilter
  nodeInstanceId: IdFilter
  podInstanceId: IdFilter
  parentInstanceId: IdFilter
}

input BillingDataLabelFilter {
  labels: [K8sLabelInput]
}

input BillingDataTagFilter {
  entityType: BillingDataTagType
  tags: [TagInput]
}

input K8sLabelInput {
  name: String
  values: [String]
}

enum BillingDataTagType {
  APPLICATION
  SERVICE
  ENVIRONMENT
}

type NodeAndPodData {
  data: [NodeAndPodDataPoint]
}

type NodeAndPodDataPoint {
  id: String
  name: String
  namespace: String
  workload: String
  node: String
  totalCost: Number
  idleCost: Number
  systemCost: Number
  unallocatedCost: Number
  cpuAllocatable: Number
  memoryAllocatable: Number
  cpuRequested: Number
  memoryRequested: Number
  cpuUnitPrice: Number
  memoryUnitPrice: Number
  instanceCategory: String
  machineType: String
  createTime: Number
  deleteTime: Number
  qosClass: String
}
