extend type Query {
  cloudProviderByName(name: String!): CloudProvider @dataFetcher(name: cloudProvider)
}

extend type Mutation {
  createCloudProvider(input: CreateCloudProviderInput!): CreateCloudProviderPayload
    @dataFetcher(name: createCloudProvider)
  updateCloudProvider(input: UpdateCloudProviderInput!): UpdateCloudProviderPayload
    @dataFetcher(name: updateCloudProvider)
  deleteCloudProvider(input: DeleteCloudProviderInput!): DeleteCloudProviderPayload
    @dataFetcher(name: deleteCloudProvider)
}

input CreateCloudProviderInput {
  clientMutationId: String
  cloudProviderType: CloudProviderType!
  pcfCloudProvider: PcfCloudProviderInput
  spotInstCloudProvider: SpotInstCloudProviderInput
  gcpCloudProvider: GcpCloudProviderInput
  k8sCloudProvider: K8sCloudProviderInput
}

input UpdateCloudProviderInput {
  clientMutationId: String
  cloudProviderId: String!
  cloudProviderType: CloudProviderType!
  pcfCloudProvider: PcfCloudProviderInput
  spotInstCloudProvider: SpotInstCloudProviderInput
  gcpCloudProvider: GcpCloudProviderInput
  k8sCloudProvider: K8sCloudProviderInput
}

input DeleteCloudProviderInput {
  clientMutationId: String
  cloudProviderId: String!
}

type CreateCloudProviderPayload {
  clientMutationId: String
  cloudProvider: CloudProvider
}

type UpdateCloudProviderPayload {
  clientMutationId: String
  cloudProvider: CloudProvider
}

type DeleteCloudProviderPayload {
  clientMutationId: String
}

input PcfCloudProviderInput {
  name: String
  usageScope: UsageScopeInput

  endpointUrl: String
  userName: String
  passwordSecretId: String
}

input SpotInstCloudProviderInput {
  name: String
  usageScope: UsageScopeInput

  accountId: String
  tokenSecretId: String
}

input GcpCloudProviderInput {
  name: String
  usageScope: UsageScopeInput

  serviceAccountKeySecretId: String
}
