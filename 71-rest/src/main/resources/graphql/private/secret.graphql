extend type Mutation {
  createSecret(input: CreateSecretInput!): CreateSecretsPayload @dataFetcher(name: createSecret)
  updateSecret(input: UpdateSecretInput!): UpdateSecretPayload @dataFetcher(name: updateSecret)
}

input CreateSecretInput {
  clientMutationId: String
  secretType: SecretType!
  encryptedText: EncryptedTextInput
  winRMCredential: WinRMCredentialInput
  sshCredential: SSHCredentialInput
}

enum SecretType {
  ENCRYPTED_TEXT
  ENCRYPTED_FILE
  WINRM_CREDENTIAL
  SSH_CREDENTIAL
}

type CreateSecretsPayload {
  clientMutationId: String
  secret: Secret
}

interface Secret {
  id: String
  secretType: SecretType
  name: String
  usageScope: UsageScope
}

input UpdateSecretInput {
  clientMutationId: String
  id: String!
  secretType: SecretType!
  encryptedText: UpdateEncryptedText
  winRMCredential: UpdateWinRMCredential
  sshCredential: UpdateSSHCredential
}

type UpdateSecretPayload {
  clientMutationId: String
  secret: Secret
}
