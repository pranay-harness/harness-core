extend type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload @dataFetcher(name: createUser)
  updateUser(input: UpdateUserInput!): UpdateUserPayload @dataFetcher(name: updateUser)
  deleteUser(input: DeleteUserInput!): DeleteUserPayload @dataFetcher(name: deleteUser)
}

extend type Query {
  user(id: String!): User @dataFetcher(name: user)
  users(limit: Int!, offset: Int): UserConnection @dataFetcher(name: userConnection)
}

input CreateUserInput {
  requestId: String!
  name: String!
  email: String!
  userGroupIds: [String!]
}

type CreateUserPayload {
  requestId: String
  user: User
}

input UpdateUserInput {
  requestId: String!
  id: String!
  name: String
  userGroupIds: [String!]
}

type UpdateUserPayload {
  requestId: String
  user: User
}

input DeleteUserInput {
  requestId: String!
  id: String!
}

type DeleteUserPayload {
  requestId: String
}

extend type User {
  id: String
  name: String
  email: String
  isEmailVerified: Boolean
  isTwoFactorAuthenticationEnabled: Boolean
  isUserLocked: Boolean
  isPasswordExpired: Boolean
  isImportedFromIdentityProvider: Boolean
  userGroups(limit: Int!, offset: Int): UserGroupConnection
    @dataFetcher(name: userGroupConnection, contextFieldArgsMap: "{ \"User\": \"id\"}")
}

type UserConnection {
  pageInfo: PageInfo
  nodes: [User]
}
