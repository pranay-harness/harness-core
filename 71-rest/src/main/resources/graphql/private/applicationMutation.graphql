extend type Mutation {
  #Creates a new Application and returns it
  createApplication(input: CreateApplicationInput!): CreateApplicationPayload @dataFetcher(name: createApplication)
  #Updates an application and returns it.
  updateApplication(input: UpdateApplicationInput!): UpdateApplicationPayload @dataFetcher(name: updateApplication)
  #Deletes an application.
  deleteApplication(input: DeleteApplicationInput!): DeleteApplicationPayload @dataFetcher(name: deleteApplication)
  #Updates  Application Git Sync Configuration. Creates the configuration, in case it does not exist. Returns updated git sync configuration.
  updateApplicationGitSyncConfig(input: UpdateApplicationGitSyncConfigInput!): UpdateApplicationGitSyncConfigPayload
    @dataFetcher(name: updateApplicationGitSyncConfig)
  #Removes Git Sync Configuration associated with an application. Returns updated application.
  removeApplicationGitSyncConfig(input: RemoveApplicationGitSyncConfigInput!): RemoveApplicationGitSyncConfigPayload
    @dataFetcher(name: removeApplicationGitSyncConfig)
  #Enable/disable Git Sync for an application. Returns updated application.
  updateApplicationGitSyncConfigStatus(
    input: UpdateApplicationGitSyncConfigStatusInput!
  ): UpdateApplicationGitSyncConfigStatusPayload @dataFetcher(name: updateApplicationGitSyncConfigStatus)
}

type UpdateApplicationGitSyncConfigPayload {
  requestId: String
  gitSyncConfig: GitSyncConfig
}

input UpdateApplicationGitSyncConfigStatusInput {
  requestId: String!
  applicationId: String!
  syncEnabled: Boolean!
}

input RemoveApplicationGitSyncConfigInput {
  requestId: String!
  applicationId: String!
}

input UpdateApplicationGitSyncConfigInput {
  requestId: String!
  applicationId: String!
  gitConnectorId: String!
  branch: String!
  syncEnabled: Boolean!
}

input CreateApplicationInput {
  requestId: String!
  name: String!
  description: String
}
input UpdateApplicationInput {
  requestId: String!
  applicationId: String!
  name: String
  description: String
}

input DeleteApplicationInput {
  requestId: String!
  applicationId: String!
}

type CreateApplicationPayload {
  requestId: String
  application: Application
}

type UpdateApplicationPayload {
  requestId: String
  application: Application
}

type DeleteApplicationPayload {
  requestId: String
}

type GitSyncConfig {
  gitConnector: GitConnector
    @dataFetcher(name: connector, contextFieldArgsMap: "{ \"connectorId\": \"gitConnectorId\"}")
  branch: String
  syncEnabled: Boolean
}

extend type Application {
  gitSyncConfig: GitSyncConfig
    @dataFetcher(name: applicationGitSyncConfig, contextFieldArgsMap: "{ \"applicationId\": \"id\"}")
}

type UpdateApplicationGitSyncConfigStatusPayload {
  requestId: String
  gitSyncConfig: GitSyncConfig
}

type RemoveApplicationGitSyncConfigPayload {
  requestId: String
  application: Application
}
