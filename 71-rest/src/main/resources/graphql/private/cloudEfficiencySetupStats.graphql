extend type Query {
  eksClusterStats(filters: [CESetupFilter]): eksClusterData @dataFetcher(name: eksClusterStats)
  linkedAccountStats(filters: [CESetupFilter]): linkedAccountData @dataFetcher(name: linkedAccountStats)
  infraAccountConnectionDetail(infraType: infraTypesEnum): infraAccountConnectionData
    @dataFetcher(name: infraAccountConnection)
}

type linkedAccountData {
  count: Number
  linkedAccounts: [linkedAccount]
}

type infraAccountConnectionData {
  harnessAccountId: String
  externalId: String
  masterAccountCloudFormationTemplateLink: String
  linkedAccountCloudFormationTemplateLink: String
  masterAccountLaunchTemplateLink: String
  linkedAccountLaunchTemplateLink: String
}

type linkedAccount {
  id: String
  name: String
  arn: String
  masterAccountId: String
}

type eksClusterData {
  count: Number
  clusters: [eksCluster]
}

type eksCluster {
  id: String
  name: String
  region: String
  infraAccountId: String
  infraMasterAccountId: String
  parentAccountSettingId: String
  cloudProviderId: String
}

input CESetupFilter {
  cloudProviderId: IdFilter
  infraMasterAccountId: IdFilter
  masterAccountSettingId: IdFilter
}

enum infraTypesEnum {
  AWS
}
