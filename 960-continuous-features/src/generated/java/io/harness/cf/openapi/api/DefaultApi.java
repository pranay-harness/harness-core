/*
 * Copyright 2021 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/*
 * Harness feature flag service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ff@harness.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.harness.cf.openapi.api;

import io.harness.cf.openapi.ApiCallback;
import io.harness.cf.openapi.ApiClient;
import io.harness.cf.openapi.ApiException;
import io.harness.cf.openapi.ApiResponse;
import io.harness.cf.openapi.Configuration;
import io.harness.cf.openapi.Pair;
import io.harness.cf.openapi.model.Feature;
import io.harness.cf.openapi.model.Features;
import io.harness.cf.openapi.model.InlineObject;

import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
  private ApiClient localVarApiClient;

  public DefaultApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  /**
   * Build call for createFeatureFlag
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param inlineObject  (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 409 </td><td> The specified resource already exists </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call createFeatureFlagCall(String accountIdentifier, String org, InlineObject inlineObject,
      final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = inlineObject;

    // create path and map variables
    String localVarPath = "/admin/features";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (accountIdentifier != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountIdentifier", accountIdentifier));
    }

    if (org != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
    }

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();
    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {"ApiKeyAuth", "BearerAuth"};
    return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
        localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call createFeatureFlagValidateBeforeCall(String accountIdentifier, String org,
      InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'accountIdentifier' is set
    if (accountIdentifier == null) {
      throw new ApiException(
          "Missing the required parameter 'accountIdentifier' when calling createFeatureFlag(Async)");
    }

    // verify the required parameter 'org' is set
    if (org == null) {
      throw new ApiException("Missing the required parameter 'org' when calling createFeatureFlag(Async)");
    }

    okhttp3.Call localVarCall = createFeatureFlagCall(accountIdentifier, org, inlineObject, _callback);
    return localVarCall;
  }

  /**
   * Create a feature
   * Create a feature flag.
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param inlineObject  (optional)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 409 </td><td> The specified resource already exists </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public void createFeatureFlag(String accountIdentifier, String org, InlineObject inlineObject) throws ApiException {
    createFeatureFlagWithHttpInfo(accountIdentifier, org, inlineObject);
  }

  /**
   * Create a feature
   * Create a feature flag.
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param inlineObject  (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 409 </td><td> The specified resource already exists </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<Void> createFeatureFlagWithHttpInfo(
      String accountIdentifier, String org, InlineObject inlineObject) throws ApiException {
    okhttp3.Call localVarCall = createFeatureFlagValidateBeforeCall(accountIdentifier, org, inlineObject, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Create a feature (asynchronously)
   * Create a feature flag.
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param inlineObject  (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 409 </td><td> The specified resource already exists </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call createFeatureFlagAsync(String accountIdentifier, String org, InlineObject inlineObject,
      final ApiCallback<Void> _callback) throws ApiException {
    okhttp3.Call localVarCall = createFeatureFlagValidateBeforeCall(accountIdentifier, org, inlineObject, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }
  /**
   * Build call for deleteFeatureFlag
   * @param identifier Unique identifier for the object in the API. (required)
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call deleteFeatureFlagCall(String identifier, String accountIdentifier, String org, String project,
      final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/admin/features/{identifier}".replaceAll("\\{"
            + "identifier"
            + "\\}",
        localVarApiClient.escapeString(identifier.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (accountIdentifier != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountIdentifier", accountIdentifier));
    }

    if (org != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
    }

    if (project != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
    }

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();
    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {"ApiKeyAuth", "BearerAuth"};
    return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams,
        localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteFeatureFlagValidateBeforeCall(String identifier, String accountIdentifier, String org,
      String project, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'identifier' is set
    if (identifier == null) {
      throw new ApiException("Missing the required parameter 'identifier' when calling deleteFeatureFlag(Async)");
    }

    // verify the required parameter 'accountIdentifier' is set
    if (accountIdentifier == null) {
      throw new ApiException(
          "Missing the required parameter 'accountIdentifier' when calling deleteFeatureFlag(Async)");
    }

    // verify the required parameter 'org' is set
    if (org == null) {
      throw new ApiException("Missing the required parameter 'org' when calling deleteFeatureFlag(Async)");
    }

    // verify the required parameter 'project' is set
    if (project == null) {
      throw new ApiException("Missing the required parameter 'project' when calling deleteFeatureFlag(Async)");
    }

    okhttp3.Call localVarCall = deleteFeatureFlagCall(identifier, accountIdentifier, org, project, _callback);
    return localVarCall;
  }

  /**
   * Delete a feature
   * Delete feature with certain identifier and account id.
   * @param identifier Unique identifier for the object in the API. (required)
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public void deleteFeatureFlag(String identifier, String accountIdentifier, String org, String project)
      throws ApiException {
    deleteFeatureFlagWithHttpInfo(identifier, accountIdentifier, org, project);
  }

  /**
   * Delete a feature
   * Delete feature with certain identifier and account id.
   * @param identifier Unique identifier for the object in the API. (required)
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<Void> deleteFeatureFlagWithHttpInfo(
      String identifier, String accountIdentifier, String org, String project) throws ApiException {
    okhttp3.Call localVarCall = deleteFeatureFlagValidateBeforeCall(identifier, accountIdentifier, org, project, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Delete a feature (asynchronously)
   * Delete feature with certain identifier and account id.
   * @param identifier Unique identifier for the object in the API. (required)
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call deleteFeatureFlagAsync(String identifier, String accountIdentifier, String org, String project,
      final ApiCallback<Void> _callback) throws ApiException {
    okhttp3.Call localVarCall =
        deleteFeatureFlagValidateBeforeCall(identifier, accountIdentifier, org, project, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }
  /**
   * Build call for getAllFeatures
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @param environment Environment (optional)
   * @param pageNumber PageNumber (optional)
   * @param pageSize PageSize (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getAllFeaturesCall(String accountIdentifier, String org, String project, String environment,
      Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/admin/features";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (accountIdentifier != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountIdentifier", accountIdentifier));
    }

    if (org != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
    }

    if (project != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
    }

    if (environment != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
    }

    if (pageNumber != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
    }

    if (pageSize != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
    }

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();
    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {"ApiKeyAuth", "BearerAuth"};
    return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
        localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAllFeaturesValidateBeforeCall(String accountIdentifier, String org, String project,
      String environment, Integer pageNumber, Integer pageSize, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'accountIdentifier' is set
    if (accountIdentifier == null) {
      throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getAllFeatures(Async)");
    }

    // verify the required parameter 'org' is set
    if (org == null) {
      throw new ApiException("Missing the required parameter 'org' when calling getAllFeatures(Async)");
    }

    // verify the required parameter 'project' is set
    if (project == null) {
      throw new ApiException("Missing the required parameter 'project' when calling getAllFeatures(Async)");
    }

    okhttp3.Call localVarCall =
        getAllFeaturesCall(accountIdentifier, org, project, environment, pageNumber, pageSize, _callback);
    return localVarCall;
  }

  /**
   * Retrieve all feature activations.
   * Used to retrieve all feature activations for certain account id.
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @param environment Environment (optional)
   * @param pageNumber PageNumber (optional)
   * @param pageSize PageSize (optional)
   * @return Features
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public Features getAllFeatures(String accountIdentifier, String org, String project, String environment,
      Integer pageNumber, Integer pageSize) throws ApiException {
    ApiResponse<Features> localVarResp =
        getAllFeaturesWithHttpInfo(accountIdentifier, org, project, environment, pageNumber, pageSize);
    return localVarResp.getData();
  }

  /**
   * Retrieve all feature activations.
   * Used to retrieve all feature activations for certain account id.
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @param environment Environment (optional)
   * @param pageNumber PageNumber (optional)
   * @param pageSize PageSize (optional)
   * @return ApiResponse&lt;Features&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<Features> getAllFeaturesWithHttpInfo(String accountIdentifier, String org, String project,
      String environment, Integer pageNumber, Integer pageSize) throws ApiException {
    okhttp3.Call localVarCall =
        getAllFeaturesValidateBeforeCall(accountIdentifier, org, project, environment, pageNumber, pageSize, null);
    Type localVarReturnType = new TypeToken<Features>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Retrieve all feature activations. (asynchronously)
   * Used to retrieve all feature activations for certain account id.
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @param environment Environment (optional)
   * @param pageNumber PageNumber (optional)
   * @param pageSize PageSize (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getAllFeaturesAsync(String accountIdentifier, String org, String project, String environment,
      Integer pageNumber, Integer pageSize, final ApiCallback<Features> _callback) throws ApiException {
    okhttp3.Call localVarCall =
        getAllFeaturesValidateBeforeCall(accountIdentifier, org, project, environment, pageNumber, pageSize, _callback);
    Type localVarReturnType = new TypeToken<Features>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getFeatureFlag
   * @param identifier Unique identifier for the object in the API. (required)
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @param environment Environment (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getFeatureFlagCall(String identifier, String accountIdentifier, String org, String project,
      String environment, final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/admin/features/{identifier}".replaceAll("\\{"
            + "identifier"
            + "\\}",
        localVarApiClient.escapeString(identifier.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (accountIdentifier != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountIdentifier", accountIdentifier));
    }

    if (org != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
    }

    if (project != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
    }

    if (environment != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
    }

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();
    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {"ApiKeyAuth", "BearerAuth"};
    return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
        localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getFeatureFlagValidateBeforeCall(String identifier, String accountIdentifier, String org,
      String project, String environment, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'identifier' is set
    if (identifier == null) {
      throw new ApiException("Missing the required parameter 'identifier' when calling getFeatureFlag(Async)");
    }

    // verify the required parameter 'accountIdentifier' is set
    if (accountIdentifier == null) {
      throw new ApiException("Missing the required parameter 'accountIdentifier' when calling getFeatureFlag(Async)");
    }

    // verify the required parameter 'org' is set
    if (org == null) {
      throw new ApiException("Missing the required parameter 'org' when calling getFeatureFlag(Async)");
    }

    // verify the required parameter 'project' is set
    if (project == null) {
      throw new ApiException("Missing the required parameter 'project' when calling getFeatureFlag(Async)");
    }

    okhttp3.Call localVarCall = getFeatureFlagCall(identifier, accountIdentifier, org, project, environment, _callback);
    return localVarCall;
  }

  /**
   * Retrieve a feature
   * Retrieve certain feature flag with certain identifier and account id.
   * @param identifier Unique identifier for the object in the API. (required)
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @param environment Environment (optional)
   * @return Feature
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public Feature getFeatureFlag(
      String identifier, String accountIdentifier, String org, String project, String environment) throws ApiException {
    ApiResponse<Feature> localVarResp =
        getFeatureFlagWithHttpInfo(identifier, accountIdentifier, org, project, environment);
    return localVarResp.getData();
  }

  /**
   * Retrieve a feature
   * Retrieve certain feature flag with certain identifier and account id.
   * @param identifier Unique identifier for the object in the API. (required)
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @param environment Environment (optional)
   * @return ApiResponse&lt;Feature&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<Feature> getFeatureFlagWithHttpInfo(
      String identifier, String accountIdentifier, String org, String project, String environment) throws ApiException {
    okhttp3.Call localVarCall =
        getFeatureFlagValidateBeforeCall(identifier, accountIdentifier, org, project, environment, null);
    Type localVarReturnType = new TypeToken<Feature>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Retrieve a feature (asynchronously)
   * Retrieve certain feature flag with certain identifier and account id.
   * @param identifier Unique identifier for the object in the API. (required)
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @param environment Environment (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getFeatureFlagAsync(String identifier, String accountIdentifier, String org, String project,
      String environment, final ApiCallback<Feature> _callback) throws ApiException {
    okhttp3.Call localVarCall =
        getFeatureFlagValidateBeforeCall(identifier, accountIdentifier, org, project, environment, _callback);
    Type localVarReturnType = new TypeToken<Feature>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for patchFeature
   * @param identifier Unique identifier for the object in the API. (required)
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @param environment Environment (required)
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 409 </td><td> The specified resource already exists </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call patchFeatureCall(String identifier, String accountIdentifier, String org, String project,
      String environment, Object UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = UNKNOWN_BASE_TYPE;

    // create path and map variables
    String localVarPath = "/admin/features/{identifier}".replaceAll("\\{"
            + "identifier"
            + "\\}",
        localVarApiClient.escapeString(identifier.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (accountIdentifier != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountIdentifier", accountIdentifier));
    }

    if (org != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("org", org));
    }

    if (project != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
    }

    if (environment != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
    }

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();
    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[] {"ApiKeyAuth", "BearerAuth"};
    return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams,
        localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call patchFeatureValidateBeforeCall(String identifier, String accountIdentifier, String org,
      String project, String environment, Object UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'identifier' is set
    if (identifier == null) {
      throw new ApiException("Missing the required parameter 'identifier' when calling patchFeature(Async)");
    }

    // verify the required parameter 'accountIdentifier' is set
    if (accountIdentifier == null) {
      throw new ApiException("Missing the required parameter 'accountIdentifier' when calling patchFeature(Async)");
    }

    // verify the required parameter 'org' is set
    if (org == null) {
      throw new ApiException("Missing the required parameter 'org' when calling patchFeature(Async)");
    }

    // verify the required parameter 'project' is set
    if (project == null) {
      throw new ApiException("Missing the required parameter 'project' when calling patchFeature(Async)");
    }

    // verify the required parameter 'environment' is set
    if (environment == null) {
      throw new ApiException("Missing the required parameter 'environment' when calling patchFeature(Async)");
    }

    okhttp3.Call localVarCall =
        patchFeatureCall(identifier, accountIdentifier, org, project, environment, UNKNOWN_BASE_TYPE, _callback);
    return localVarCall;
  }

  /**
   * Modify a feature using instructions
   * Modify feature flag with certain identifier and account id.
   * @param identifier Unique identifier for the object in the API. (required)
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @param environment Environment (required)
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return Feature
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 409 </td><td> The specified resource already exists </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public Feature patchFeature(String identifier, String accountIdentifier, String org, String project,
      String environment, Object UNKNOWN_BASE_TYPE) throws ApiException {
    ApiResponse<Feature> localVarResp =
        patchFeatureWithHttpInfo(identifier, accountIdentifier, org, project, environment, UNKNOWN_BASE_TYPE);
    return localVarResp.getData();
  }

  /**
   * Modify a feature using instructions
   * Modify feature flag with certain identifier and account id.
   * @param identifier Unique identifier for the object in the API. (required)
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @param environment Environment (required)
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ApiResponse&lt;Feature&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 409 </td><td> The specified resource already exists </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<Feature> patchFeatureWithHttpInfo(String identifier, String accountIdentifier, String org,
      String project, String environment, Object UNKNOWN_BASE_TYPE) throws ApiException {
    okhttp3.Call localVarCall = patchFeatureValidateBeforeCall(
        identifier, accountIdentifier, org, project, environment, UNKNOWN_BASE_TYPE, null);
    Type localVarReturnType = new TypeToken<Feature>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Modify a feature using instructions (asynchronously)
   * Modify feature flag with certain identifier and account id.
   * @param identifier Unique identifier for the object in the API. (required)
   * @param accountIdentifier Account (required)
   * @param org Organization Identifier (required)
   * @param project Project (required)
   * @param environment Environment (required)
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> The specified resource was not found </td><td>  -  </td></tr>
      <tr><td> 409 </td><td> The specified resource already exists </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call patchFeatureAsync(String identifier, String accountIdentifier, String org, String project,
      String environment, Object UNKNOWN_BASE_TYPE, final ApiCallback<Feature> _callback) throws ApiException {
    okhttp3.Call localVarCall = patchFeatureValidateBeforeCall(
        identifier, accountIdentifier, org, project, environment, UNKNOWN_BASE_TYPE, _callback);
    Type localVarReturnType = new TypeToken<Feature>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}
