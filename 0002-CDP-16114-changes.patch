From 565af175d55b28ca204094511e808fb5cc98c406 Mon Sep 17 00:00:00 2001
From: Sri Pardha Chidella <sripardha.chidella@harness.io>
Date: Wed, 17 Mar 2021 13:07:17 +0530
Subject: [PATCH 2/4] [CDP-16114]: changes

---
 .../wings/delegatetasks/k8s/K8sTaskTest.java     |  2 +-
 .../K8sWatchPerpetualTaskServiceClient.java      |  2 +-
 .../wings/api/k8s/K8sContextElement.java         |  2 ++
 .../wings/api/k8s/K8sExecutionSummary.java       |  1 +
 .../wings/api/k8s/K8sStateExecutionData.java     |  2 ++
 .../wings/api/k8s/K8sSwapServiceElement.java     |  3 +++
 .../wings/beans/GitFetchFilesTaskParams.java     |  8 ++++++++
 .../ext/k8s/request/K8sApplyTaskParameters.java  | 10 ++++++----
 .../K8sBlueGreenDeployTaskParameters.java        | 10 ++++++----
 .../request/K8sCanaryDeployTaskParameters.java   | 12 +++++++-----
 .../request/K8sCanaryRollbackTaskParameters.java |  6 ++++--
 .../ext/k8s/request/K8sDeleteTaskParameters.java | 10 ++++++----
 .../request/K8sInstanceSyncTaskParameters.java   |  8 +++++---
 .../K8sRollingDeployRollbackTaskParameters.java  |  6 ++++--
 .../request/K8sRollingDeployTaskParameters.java  |  6 ++++--
 .../ext/k8s/request/K8sScaleTaskParameters.java  |  6 ++++--
 .../ext/k8s/request/K8sTaskParameters.java       |  8 ++++++++
 .../request/K8sTrafficSplitTaskParameters.java   |  6 ++++--
 .../wings/sm/states/k8s/AbstractK8sState.java    |  9 +++++++++
 .../wings/sm/states/k8s/K8sApplyState.java       |  2 +-
 .../wings/sm/states/k8s/K8sBlueGreenDeploy.java  |  2 +-
 .../wings/sm/states/k8s/K8sCanaryDeploy.java     |  2 +-
 .../software/wings/sm/states/k8s/K8sDelete.java  |  2 +-
 .../wings/sm/states/k8s/K8sRollingDeploy.java    |  2 +-
 .../sm/states/k8s/K8sRollingDeployRollback.java  | 10 ++++++++++
 .../wings/sm/states/k8s/K8sStateHelper.java      | 16 ++++++++++++++++
 .../main/java/io/harness/beans/FeatureName.java  |  1 +
 27 files changed, 117 insertions(+), 37 deletions(-)

diff --git a/260-delegate/src/test/java/software/wings/delegatetasks/k8s/K8sTaskTest.java b/260-delegate/src/test/java/software/wings/delegatetasks/k8s/K8sTaskTest.java
index 55f59fcedc..544e8294ca 100644
--- a/260-delegate/src/test/java/software/wings/delegatetasks/k8s/K8sTaskTest.java
+++ b/260-delegate/src/test/java/software/wings/delegatetasks/k8s/K8sTaskTest.java
@@ -64,7 +64,7 @@ public class K8sTaskTest extends WingsBaseTest {
   public void setup() {
     k8sClusterConfig = K8sClusterConfig.builder().build();
     k8sTaskParameters = new K8sTaskParameters(ACCOUNT_ID, APP_ID, COMMAND_NAME, ACTIVITY_ID, k8sClusterConfig,
-        WORKFLOW_EXECUTION_ID, RELEASE_NAME, TIMEOUT_INTERVAL, K8sTaskType.INSTANCE_SYNC, HelmVersion.V2);
+        WORKFLOW_EXECUTION_ID, RELEASE_NAME, TIMEOUT_INTERVAL, K8sTaskType.INSTANCE_SYNC, HelmVersion.V2, null);
   }
 
   @Test
diff --git a/400-rest/src/main/java/io/harness/perpetualtask/k8s/watch/K8sWatchPerpetualTaskServiceClient.java b/400-rest/src/main/java/io/harness/perpetualtask/k8s/watch/K8sWatchPerpetualTaskServiceClient.java
index 1641ef1af0..4cc9bced04 100644
--- a/400-rest/src/main/java/io/harness/perpetualtask/k8s/watch/K8sWatchPerpetualTaskServiceClient.java
+++ b/400-rest/src/main/java/io/harness/perpetualtask/k8s/watch/K8sWatchPerpetualTaskServiceClient.java
@@ -62,7 +62,7 @@ public class K8sWatchPerpetualTaskServiceClient implements PerpetualTaskServiceC
         (K8sClusterConfig) kryoSerializer.asObject(params.getK8SClusterConfig().toByteArray());
 
     K8sTaskParameters k8sTaskParameters =
-        new K8sTaskParameters("", "", "", "", k8sClusterConfig, "", "", 0, APPLY, null);
+        new K8sTaskParameters("", "", "", "", k8sClusterConfig, "", "", 0, APPLY, null, null);
 
     return DelegateTask.builder()
         .accountId(accountId)
diff --git a/400-rest/src/main/java/software/wings/api/k8s/K8sContextElement.java b/400-rest/src/main/java/software/wings/api/k8s/K8sContextElement.java
index 23ca19346d..60df8ad77c 100644
--- a/400-rest/src/main/java/software/wings/api/k8s/K8sContextElement.java
+++ b/400-rest/src/main/java/software/wings/api/k8s/K8sContextElement.java
@@ -6,6 +6,7 @@ import software.wings.beans.TaskType;
 import software.wings.sm.ContextElement;
 import software.wings.sm.ExecutionContext;
 
+import java.util.List;
 import java.util.Map;
 import lombok.Builder;
 import lombok.Data;
@@ -17,6 +18,7 @@ public class K8sContextElement implements ContextElement {
   Integer releaseNumber;
   Integer targetInstances;
   TaskType currentTaskType;
+  List<String> delegateSelectors;
 
   @Override
   public ContextElementType getElementType() {
diff --git a/400-rest/src/main/java/software/wings/api/k8s/K8sExecutionSummary.java b/400-rest/src/main/java/software/wings/api/k8s/K8sExecutionSummary.java
index deadf73c34..54b425925a 100644
--- a/400-rest/src/main/java/software/wings/api/k8s/K8sExecutionSummary.java
+++ b/400-rest/src/main/java/software/wings/api/k8s/K8sExecutionSummary.java
@@ -21,4 +21,5 @@ public class K8sExecutionSummary extends StepExecutionSummary {
   private Set<String> namespaces;
   private HelmChartInfo helmChartInfo;
   private String blueGreenStageColor;
+  private Set<String> delegateSelectors;
 }
diff --git a/400-rest/src/main/java/software/wings/api/k8s/K8sStateExecutionData.java b/400-rest/src/main/java/software/wings/api/k8s/K8sStateExecutionData.java
index 060b773251..595b713464 100644
--- a/400-rest/src/main/java/software/wings/api/k8s/K8sStateExecutionData.java
+++ b/400-rest/src/main/java/software/wings/api/k8s/K8sStateExecutionData.java
@@ -45,6 +45,7 @@ public class K8sStateExecutionData extends StateExecutionData implements Delegat
   @Builder.Default private Set<String> namespaces = new HashSet<>();
   private HelmChartInfo helmChartInfo;
   private String blueGreenStageColor;
+  private Set<String> delegateSelectors;
 
   @Override
   public Map<String, ExecutionDataValue> getExecutionDetails() {
@@ -90,6 +91,7 @@ public class K8sStateExecutionData extends StateExecutionData implements Delegat
         .namespaces(namespaces)
         .helmChartInfo(helmChartInfo)
         .blueGreenStageColor(blueGreenStageColor)
+        .delegateSelectors(delegateSelectors)
         .build();
   }
 }
diff --git a/400-rest/src/main/java/software/wings/api/k8s/K8sSwapServiceElement.java b/400-rest/src/main/java/software/wings/api/k8s/K8sSwapServiceElement.java
index c83b7a6d4a..0b5db5e1bb 100644
--- a/400-rest/src/main/java/software/wings/api/k8s/K8sSwapServiceElement.java
+++ b/400-rest/src/main/java/software/wings/api/k8s/K8sSwapServiceElement.java
@@ -3,8 +3,11 @@ package software.wings.api.k8s;
 import lombok.Builder;
 import lombok.Data;
 
+import java.util.Set;
+
 @Data
 @Builder
 public class K8sSwapServiceElement {
   private boolean swapDone;
+  private Set<String> delegateSelectors;
 }
diff --git a/400-rest/src/main/java/software/wings/beans/GitFetchFilesTaskParams.java b/400-rest/src/main/java/software/wings/beans/GitFetchFilesTaskParams.java
index b3a62538fa..4f09fb2fd1 100644
--- a/400-rest/src/main/java/software/wings/beans/GitFetchFilesTaskParams.java
+++ b/400-rest/src/main/java/software/wings/beans/GitFetchFilesTaskParams.java
@@ -4,6 +4,7 @@ import static io.harness.data.structure.EmptyPredicate.isNotEmpty;
 
 import io.harness.delegate.beans.executioncapability.ExecutionCapability;
 import io.harness.delegate.beans.executioncapability.ExecutionCapabilityDemander;
+import io.harness.delegate.beans.executioncapability.SelectorCapability;
 import io.harness.delegate.task.ActivityAccess;
 import io.harness.delegate.task.TaskParameters;
 import io.harness.expression.ExpressionEvaluator;
@@ -15,6 +16,8 @@ import software.wings.service.impl.ContainerServiceParams;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
+
 import lombok.Builder;
 import lombok.Data;
 
@@ -30,6 +33,7 @@ public class GitFetchFilesTaskParams implements ActivityAccess, TaskParameters,
   private final ContainerServiceParams containerServiceParams;
   private boolean isBindTaskFeatureSet; // BIND_FETCH_FILES_TASK_TO_DELEGATE
   private String executionLogName;
+  private Set<String> delegateSelectors;
 
   @Override
   public List<ExecutionCapability> fetchRequiredExecutionCapabilities(ExpressionEvaluator maskingEvaluator) {
@@ -50,6 +54,10 @@ public class GitFetchFilesTaskParams implements ActivityAccess, TaskParameters,
       }
     }
 
+    if (isNotEmpty(delegateSelectors)) {
+      executionCapabilities.add(SelectorCapability.builder().selectors(delegateSelectors).build());
+    }
+
     return executionCapabilities;
   }
 }
diff --git a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sApplyTaskParameters.java b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sApplyTaskParameters.java
index 32435a37a0..82b9c49cfc 100644
--- a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sApplyTaskParameters.java
+++ b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sApplyTaskParameters.java
@@ -9,6 +9,8 @@ import io.harness.expression.Expression;
 import io.harness.k8s.model.HelmVersion;
 
 import java.util.List;
+import java.util.Set;
+
 import lombok.Builder;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
@@ -26,11 +28,11 @@ public class K8sApplyTaskParameters extends K8sTaskParameters implements Manifes
 
   @Builder
   public K8sApplyTaskParameters(String accountId, String appId, String commandName, String activityId,
-      K8sTaskType k8sTaskType, K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName,
-      Integer timeoutIntervalInMin, K8sDelegateManifestConfig k8sDelegateManifestConfig, List<String> valuesYamlList,
-      String filePaths, boolean skipSteadyStateCheck, boolean skipDryRun, HelmVersion helmVersion) {
+                                K8sTaskType k8sTaskType, K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName,
+                                Integer timeoutIntervalInMin, K8sDelegateManifestConfig k8sDelegateManifestConfig, List<String> valuesYamlList,
+                                String filePaths, boolean skipSteadyStateCheck, boolean skipDryRun, HelmVersion helmVersion, Set<String> delegateSelectors) {
     super(accountId, appId, commandName, activityId, k8sClusterConfig, workflowExecutionId, releaseName,
-        timeoutIntervalInMin, k8sTaskType, helmVersion);
+        timeoutIntervalInMin, k8sTaskType, helmVersion, delegateSelectors);
 
     this.k8sDelegateManifestConfig = k8sDelegateManifestConfig;
     this.valuesYamlList = valuesYamlList;
diff --git a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sBlueGreenDeployTaskParameters.java b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sBlueGreenDeployTaskParameters.java
index 373e615477..cc48b991c7 100644
--- a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sBlueGreenDeployTaskParameters.java
+++ b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sBlueGreenDeployTaskParameters.java
@@ -9,6 +9,8 @@ import io.harness.expression.Expression;
 import io.harness.k8s.model.HelmVersion;
 
 import java.util.List;
+import java.util.Set;
+
 import lombok.Builder;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
@@ -24,11 +26,11 @@ public class K8sBlueGreenDeployTaskParameters extends K8sTaskParameters implemen
 
   @Builder
   public K8sBlueGreenDeployTaskParameters(String accountId, String appId, String commandName, String activityId,
-      K8sTaskType k8sTaskType, K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName,
-      Integer timeoutIntervalInMin, K8sDelegateManifestConfig k8sDelegateManifestConfig, List<String> valuesYamlList,
-      boolean skipDryRun, HelmVersion helmVersion, Boolean skipVersioningForAllK8sObjects) {
+                                          K8sTaskType k8sTaskType, K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName,
+                                          Integer timeoutIntervalInMin, K8sDelegateManifestConfig k8sDelegateManifestConfig, List<String> valuesYamlList,
+                                          boolean skipDryRun, HelmVersion helmVersion, Boolean skipVersioningForAllK8sObjects, Set<String> delegateSelectors) {
     super(accountId, appId, commandName, activityId, k8sClusterConfig, workflowExecutionId, releaseName,
-        timeoutIntervalInMin, k8sTaskType, helmVersion);
+        timeoutIntervalInMin, k8sTaskType, helmVersion, delegateSelectors);
     this.k8sDelegateManifestConfig = k8sDelegateManifestConfig;
     this.valuesYamlList = valuesYamlList;
     this.skipDryRun = skipDryRun;
diff --git a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sCanaryDeployTaskParameters.java b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sCanaryDeployTaskParameters.java
index 3bbccb1901..41425a9d57 100644
--- a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sCanaryDeployTaskParameters.java
+++ b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sCanaryDeployTaskParameters.java
@@ -12,6 +12,8 @@ import software.wings.beans.InstanceUnitType;
 
 import java.util.List;
 import java.util.Optional;
+import java.util.Set;
+
 import lombok.Builder;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
@@ -30,12 +32,12 @@ public class K8sCanaryDeployTaskParameters extends K8sTaskParameters implements
 
   @Builder
   public K8sCanaryDeployTaskParameters(String accountId, String appId, String commandName, String activityId,
-      K8sTaskType k8sTaskType, K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName,
-      Integer timeoutIntervalInMin, K8sDelegateManifestConfig k8sDelegateManifestConfig, List<String> valuesYamlList,
-      Integer instances, InstanceUnitType instanceUnitType, Integer maxInstances, boolean skipDryRun,
-      HelmVersion helmVersion, Boolean skipVersioningForAllK8sObjects) {
+                                       K8sTaskType k8sTaskType, K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName,
+                                       Integer timeoutIntervalInMin, K8sDelegateManifestConfig k8sDelegateManifestConfig, List<String> valuesYamlList,
+                                       Integer instances, InstanceUnitType instanceUnitType, Integer maxInstances, boolean skipDryRun,
+                                       HelmVersion helmVersion, Boolean skipVersioningForAllK8sObjects, Set<String> delegateSelectors) {
     super(accountId, appId, commandName, activityId, k8sClusterConfig, workflowExecutionId, releaseName,
-        timeoutIntervalInMin, k8sTaskType, helmVersion);
+        timeoutIntervalInMin, k8sTaskType, helmVersion, delegateSelectors);
     this.k8sDelegateManifestConfig = k8sDelegateManifestConfig;
     this.valuesYamlList = valuesYamlList;
     this.instances = instances;
diff --git a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sCanaryRollbackTaskParameters.java b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sCanaryRollbackTaskParameters.java
index 104bd6165c..5b5312e8a2 100644
--- a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sCanaryRollbackTaskParameters.java
+++ b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sCanaryRollbackTaskParameters.java
@@ -5,6 +5,7 @@ import io.harness.annotations.dev.TargetModule;
 import io.harness.delegate.task.k8s.K8sTaskType;
 import io.harness.k8s.model.HelmVersion;
 
+import java.util.Set;
 import lombok.Builder;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
@@ -18,9 +19,10 @@ public class K8sCanaryRollbackTaskParameters extends K8sTaskParameters {
   @Builder
   public K8sCanaryRollbackTaskParameters(String accountId, String appId, String commandName, String activityId,
       K8sTaskType k8sTaskType, K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName,
-      Integer timeoutIntervalInMin, Integer releaseNumber, Integer targetReplicas, HelmVersion helmVersion) {
+      Integer timeoutIntervalInMin, Integer releaseNumber, Integer targetReplicas, HelmVersion helmVersion,
+      Set<String> delegateSelectors) {
     super(accountId, appId, commandName, activityId, k8sClusterConfig, workflowExecutionId, releaseName,
-        timeoutIntervalInMin, k8sTaskType, helmVersion);
+        timeoutIntervalInMin, k8sTaskType, helmVersion, delegateSelectors);
     this.releaseNumber = releaseNumber;
     this.targetReplicas = targetReplicas;
   }
diff --git a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sDeleteTaskParameters.java b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sDeleteTaskParameters.java
index e9cb1b26cb..08a6e41526 100644
--- a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sDeleteTaskParameters.java
+++ b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sDeleteTaskParameters.java
@@ -9,6 +9,8 @@ import io.harness.expression.Expression;
 import io.harness.k8s.model.HelmVersion;
 
 import java.util.List;
+import java.util.Set;
+
 import lombok.Builder;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
@@ -25,11 +27,11 @@ public class K8sDeleteTaskParameters extends K8sTaskParameters {
 
   @Builder
   public K8sDeleteTaskParameters(String accountId, String appId, String commandName, String activityId,
-      K8sTaskType k8sTaskType, K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName,
-      Integer timeoutIntervalInMin, K8sDelegateManifestConfig k8sDelegateManifestConfig, List<String> valuesYamlList,
-      String resources, boolean deleteNamespacesForRelease, HelmVersion helmVersion, String filePaths) {
+                                 K8sTaskType k8sTaskType, K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName,
+                                 Integer timeoutIntervalInMin, K8sDelegateManifestConfig k8sDelegateManifestConfig, List<String> valuesYamlList,
+                                 String resources, boolean deleteNamespacesForRelease, HelmVersion helmVersion, String filePaths, Set<String> delegateSelectors) {
     super(accountId, appId, commandName, activityId, k8sClusterConfig, workflowExecutionId, releaseName,
-        timeoutIntervalInMin, k8sTaskType, helmVersion);
+        timeoutIntervalInMin, k8sTaskType, helmVersion, delegateSelectors);
     this.k8sDelegateManifestConfig = k8sDelegateManifestConfig;
     this.valuesYamlList = valuesYamlList;
     this.resources = resources;
diff --git a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sInstanceSyncTaskParameters.java b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sInstanceSyncTaskParameters.java
index 8ae8515a85..5e9acce496 100644
--- a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sInstanceSyncTaskParameters.java
+++ b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sInstanceSyncTaskParameters.java
@@ -9,6 +9,8 @@ import lombok.Builder;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 
+import java.util.Set;
+
 @Data
 @EqualsAndHashCode(callSuper = true)
 @TargetModule(Module._950_DELEGATE_TASKS_BEANS)
@@ -16,10 +18,10 @@ public class K8sInstanceSyncTaskParameters extends K8sTaskParameters {
   String namespace;
   @Builder
   public K8sInstanceSyncTaskParameters(String accountId, String appId, String commandName, String activityId,
-      K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName, Integer timeoutIntervalInMin,
-      String namespace, HelmVersion helmVersion) {
+                                       K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName, Integer timeoutIntervalInMin,
+                                       String namespace, HelmVersion helmVersion, Set<String> delegateSelectors) {
     super(accountId, appId, commandName, activityId, k8sClusterConfig, workflowExecutionId, releaseName,
-        timeoutIntervalInMin, K8sTaskType.INSTANCE_SYNC, helmVersion);
+        timeoutIntervalInMin, K8sTaskType.INSTANCE_SYNC, helmVersion, delegateSelectors);
     this.namespace = namespace;
   }
 }
diff --git a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sRollingDeployRollbackTaskParameters.java b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sRollingDeployRollbackTaskParameters.java
index 3035a1b381..4ded064540 100644
--- a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sRollingDeployRollbackTaskParameters.java
+++ b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sRollingDeployRollbackTaskParameters.java
@@ -9,6 +9,8 @@ import lombok.Builder;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 
+import java.util.Set;
+
 @Data
 @EqualsAndHashCode(callSuper = true)
 @TargetModule(Module._950_DELEGATE_TASKS_BEANS)
@@ -17,9 +19,9 @@ public class K8sRollingDeployRollbackTaskParameters extends K8sTaskParameters {
   @Builder
   public K8sRollingDeployRollbackTaskParameters(String accountId, String appId, String commandName, String activityId,
       K8sTaskType k8sTaskType, K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName,
-      Integer timeoutIntervalInMin, Integer releaseNumber, HelmVersion helmVersion) {
+      Integer timeoutIntervalInMin, Integer releaseNumber, HelmVersion helmVersion, Set<String> delegateSelectors) {
     super(accountId, appId, commandName, activityId, k8sClusterConfig, workflowExecutionId, releaseName,
-        timeoutIntervalInMin, k8sTaskType, helmVersion);
+        timeoutIntervalInMin, k8sTaskType, helmVersion, delegateSelectors);
     this.releaseNumber = releaseNumber;
   }
 }
diff --git a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sRollingDeployTaskParameters.java b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sRollingDeployTaskParameters.java
index 5909ee70ef..78f08b64b3 100644
--- a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sRollingDeployTaskParameters.java
+++ b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sRollingDeployTaskParameters.java
@@ -9,6 +9,8 @@ import io.harness.expression.Expression;
 import io.harness.k8s.model.HelmVersion;
 
 import java.util.List;
+import java.util.Set;
+
 import lombok.Builder;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
@@ -29,9 +31,9 @@ public class K8sRollingDeployTaskParameters extends K8sTaskParameters implements
       K8sTaskType k8sTaskType, K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName,
       Integer timeoutIntervalInMin, K8sDelegateManifestConfig k8sDelegateManifestConfig, List<String> valuesYamlList,
       boolean isInCanaryWorkflow, boolean skipDryRun, HelmVersion helmVersion, boolean localOverrideFeatureFlag,
-      Boolean skipVersioningForAllK8sObjects) {
+      Boolean skipVersioningForAllK8sObjects, Set<String> delegateSelectors) {
     super(accountId, appId, commandName, activityId, k8sClusterConfig, workflowExecutionId, releaseName,
-        timeoutIntervalInMin, k8sTaskType, helmVersion);
+        timeoutIntervalInMin, k8sTaskType, helmVersion, delegateSelectors);
     this.k8sDelegateManifestConfig = k8sDelegateManifestConfig;
     this.valuesYamlList = valuesYamlList;
     this.isInCanaryWorkflow = isInCanaryWorkflow;
diff --git a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sScaleTaskParameters.java b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sScaleTaskParameters.java
index b2c942e804..8a4f7b225a 100644
--- a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sScaleTaskParameters.java
+++ b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sScaleTaskParameters.java
@@ -8,6 +8,8 @@ import io.harness.k8s.model.HelmVersion;
 import software.wings.beans.InstanceUnitType;
 
 import java.util.Optional;
+import java.util.Set;
+
 import lombok.Builder;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
@@ -25,9 +27,9 @@ public class K8sScaleTaskParameters extends K8sTaskParameters {
   public K8sScaleTaskParameters(String accountId, String appId, String commandName, String activityId,
       K8sTaskType k8sTaskType, K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName,
       Integer timeoutIntervalInMin, String workload, Integer instances, InstanceUnitType instanceUnitType,
-      Integer maxInstances, boolean skipSteadyStateCheck, HelmVersion helmVersion) {
+      Integer maxInstances, boolean skipSteadyStateCheck, HelmVersion helmVersion, Set<String> delegateSelectors) {
     super(accountId, appId, commandName, activityId, k8sClusterConfig, workflowExecutionId, releaseName,
-        timeoutIntervalInMin, k8sTaskType, helmVersion);
+        timeoutIntervalInMin, k8sTaskType, helmVersion, delegateSelectors);
     this.workload = workload;
     this.instances = instances;
     this.instanceUnitType = instanceUnitType;
diff --git a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sTaskParameters.java b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sTaskParameters.java
index cee1339d7b..fb986a2ada 100644
--- a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sTaskParameters.java
+++ b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sTaskParameters.java
@@ -1,5 +1,6 @@
 package software.wings.helpers.ext.k8s.request;
 
+import static io.harness.data.structure.EmptyPredicate.isNotEmpty;
 import static io.harness.expression.Expression.DISALLOW_SECRETS;
 
 import io.harness.annotations.dev.Module;
@@ -7,6 +8,7 @@ import io.harness.annotations.dev.TargetModule;
 import io.harness.delegate.beans.executioncapability.ExecutionCapability;
 import io.harness.delegate.beans.executioncapability.ExecutionCapabilityDemander;
 import io.harness.delegate.beans.executioncapability.KustomizeCapability;
+import io.harness.delegate.beans.executioncapability.SelectorCapability;
 import io.harness.delegate.task.ActivityAccess;
 import io.harness.delegate.task.TaskParameters;
 import io.harness.delegate.task.k8s.K8sTaskType;
@@ -18,6 +20,8 @@ import software.wings.helpers.ext.kustomize.KustomizeConfig;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Set;
+
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import org.hibernate.validator.constraints.NotEmpty;
@@ -36,6 +40,7 @@ public class K8sTaskParameters implements TaskParameters, ActivityAccess, Execut
   private Integer timeoutIntervalInMin;
   @NotEmpty private K8sTaskType commandType;
   private HelmVersion helmVersion;
+  private Set<String> delegateSelectors;
 
   @Override
   public List<ExecutionCapability> fetchRequiredExecutionCapabilities(ExpressionEvaluator maskingEvaluator) {
@@ -47,6 +52,9 @@ public class K8sTaskParameters implements TaskParameters, ActivityAccess, Execut
               .pluginRootDir(fetchKustomizeConfig((ManifestAwareTaskParams) this).getPluginRootDir())
               .build());
     }
+    if (isNotEmpty(delegateSelectors)) {
+      executionCapabilities.add(SelectorCapability.builder().selectors(delegateSelectors).build());
+    }
 
     return executionCapabilities;
   }
diff --git a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sTrafficSplitTaskParameters.java b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sTrafficSplitTaskParameters.java
index 725f84902d..8096875581 100644
--- a/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sTrafficSplitTaskParameters.java
+++ b/400-rest/src/main/java/software/wings/helpers/ext/k8s/request/K8sTrafficSplitTaskParameters.java
@@ -7,6 +7,8 @@ import io.harness.k8s.model.HelmVersion;
 import io.harness.k8s.model.IstioDestinationWeight;
 
 import java.util.List;
+import java.util.Set;
+
 import lombok.Builder;
 import lombok.Data;
 
@@ -20,9 +22,9 @@ public class K8sTrafficSplitTaskParameters extends K8sTaskParameters {
   public K8sTrafficSplitTaskParameters(String accountId, String appId, String commandName, String activityId,
       K8sTaskType k8sTaskType, K8sClusterConfig k8sClusterConfig, String workflowExecutionId, String releaseName,
       Integer timeoutIntervalInMin, String virtualServiceName, List<IstioDestinationWeight> istioDestinationWeights,
-      HelmVersion helmVersion) {
+      HelmVersion helmVersion, Set<String> delegateSelectors) {
     super(accountId, appId, commandName, activityId, k8sClusterConfig, workflowExecutionId, releaseName,
-        timeoutIntervalInMin, k8sTaskType, helmVersion);
+        timeoutIntervalInMin, k8sTaskType, helmVersion, delegateSelectors);
 
     this.virtualServiceName = virtualServiceName;
     this.istioDestinationWeights = istioDestinationWeights;
diff --git a/400-rest/src/main/java/software/wings/sm/states/k8s/AbstractK8sState.java b/400-rest/src/main/java/software/wings/sm/states/k8s/AbstractK8sState.java
index f7bc1df879..f5df956650 100644
--- a/400-rest/src/main/java/software/wings/sm/states/k8s/AbstractK8sState.java
+++ b/400-rest/src/main/java/software/wings/sm/states/k8s/AbstractK8sState.java
@@ -298,6 +298,9 @@ public abstract class AbstractK8sState extends State implements K8sStateExecutor
     fetchFilesTaskParams.setActivityId(activityId);
     fetchFilesTaskParams.setAppManifestKind(AppManifestKind.VALUES);
 
+    Set<String> renderedAndTrimmedSelectors = getRenderedAndTrimmedSelectors(context);
+    fetchFilesTaskParams.setDelegateSelectors(renderedAndTrimmedSelectors);
+
     applicationManifestUtils.setValuesPathInGitFetchFilesTaskParams(fetchFilesTaskParams);
 
     ContainerInfrastructureMapping infraMapping = k8sStateHelper.fetchContainerInfrastructureMapping(context);
@@ -515,6 +518,8 @@ public abstract class AbstractK8sState extends State implements K8sStateExecutor
     k8sTaskParameters.setK8sClusterConfig(k8sClusterConfig);
     k8sTaskParameters.setWorkflowExecutionId(context.getWorkflowExecutionId());
     k8sTaskParameters.setHelmVersion(serviceResourceService.getHelmVersionWithDefault(context.getAppId(), serviceId));
+    Set<String> renderedAndTrimmedSelectors = getRenderedAndTrimmedSelectors(context);
+    k8sTaskParameters.setDelegateSelectors(renderedAndTrimmedSelectors);
 
     long taskTimeoutInMillis = DEFAULT_ASYNC_CALL_TIMEOUT;
 
@@ -1049,6 +1054,10 @@ public abstract class AbstractK8sState extends State implements K8sStateExecutor
 
   public abstract List<String> getDelegateSelectors(ExecutionContext context);
 
+  protected Set<String> getRenderedAndTrimmedSelectors(ExecutionContext context) {
+    return k8sStateHelper.getRenderedAndTrimmedSelectors(context, getDelegateSelectors(context));
+  }
+
   @Override
   public boolean isSelectionLogsTrackingForTasksEnabled() {
     return true;
diff --git a/400-rest/src/main/java/software/wings/sm/states/k8s/K8sApplyState.java b/400-rest/src/main/java/software/wings/sm/states/k8s/K8sApplyState.java
index ceca03facc..9a538c35ad 100644
--- a/400-rest/src/main/java/software/wings/sm/states/k8s/K8sApplyState.java
+++ b/400-rest/src/main/java/software/wings/sm/states/k8s/K8sApplyState.java
@@ -64,7 +64,7 @@ public class K8sApplyState extends AbstractK8sState {
   @Getter @Setter @Attributes(title = "delegateSelectors") private List<String> delegateSelectors;
 
   @Override
-  public List<String> getDelegateSelectors(ExecutionContext context){
+  public List<String> getDelegateSelectors(ExecutionContext context) {
     return getDelegateSelectors();
   }
 
diff --git a/400-rest/src/main/java/software/wings/sm/states/k8s/K8sBlueGreenDeploy.java b/400-rest/src/main/java/software/wings/sm/states/k8s/K8sBlueGreenDeploy.java
index ed167728af..0c50cea128 100644
--- a/400-rest/src/main/java/software/wings/sm/states/k8s/K8sBlueGreenDeploy.java
+++ b/400-rest/src/main/java/software/wings/sm/states/k8s/K8sBlueGreenDeploy.java
@@ -65,7 +65,7 @@ public class K8sBlueGreenDeploy extends AbstractK8sState {
   @Getter @Setter @Attributes(title = "delegateSelectors") private List<String> delegateSelectors;
 
   @Override
-  public List<String> getDelegateSelectors(ExecutionContext context){
+  public List<String> getDelegateSelectors(ExecutionContext context) {
     return getDelegateSelectors();
   }
 
diff --git a/400-rest/src/main/java/software/wings/sm/states/k8s/K8sCanaryDeploy.java b/400-rest/src/main/java/software/wings/sm/states/k8s/K8sCanaryDeploy.java
index c67675ec0c..daecaa8057 100644
--- a/400-rest/src/main/java/software/wings/sm/states/k8s/K8sCanaryDeploy.java
+++ b/400-rest/src/main/java/software/wings/sm/states/k8s/K8sCanaryDeploy.java
@@ -79,7 +79,7 @@ public class K8sCanaryDeploy extends AbstractK8sState {
   @Getter @Setter @Attributes(title = "delegateSelectors") private List<String> delegateSelectors;
 
   @Override
-  public List<String> getDelegateSelectors(ExecutionContext context){
+  public List<String> getDelegateSelectors(ExecutionContext context) {
     return getDelegateSelectors();
   }
 
diff --git a/400-rest/src/main/java/software/wings/sm/states/k8s/K8sDelete.java b/400-rest/src/main/java/software/wings/sm/states/k8s/K8sDelete.java
index 4e01bd049b..65f45b4c84 100644
--- a/400-rest/src/main/java/software/wings/sm/states/k8s/K8sDelete.java
+++ b/400-rest/src/main/java/software/wings/sm/states/k8s/K8sDelete.java
@@ -86,7 +86,7 @@ public class K8sDelete extends AbstractK8sState {
   @Getter @Setter @Attributes(title = "delegateSelectors") private List<String> delegateSelectors;
 
   @Override
-  public List<String> getDelegateSelectors(ExecutionContext context){
+  public List<String> getDelegateSelectors(ExecutionContext context) {
     return getDelegateSelectors();
   }
 
diff --git a/400-rest/src/main/java/software/wings/sm/states/k8s/K8sRollingDeploy.java b/400-rest/src/main/java/software/wings/sm/states/k8s/K8sRollingDeploy.java
index 1e8896610d..3ef4d52705 100644
--- a/400-rest/src/main/java/software/wings/sm/states/k8s/K8sRollingDeploy.java
+++ b/400-rest/src/main/java/software/wings/sm/states/k8s/K8sRollingDeploy.java
@@ -69,7 +69,7 @@ public class K8sRollingDeploy extends AbstractK8sState {
   @Getter @Setter @Attributes(title = "delegateSelectors") private List<String> delegateSelectors;
 
   @Override
-  public List<String> getDelegateSelectors(ExecutionContext context){
+  public List<String> getDelegateSelectors(ExecutionContext context) {
     return getDelegateSelectors();
   }
 
diff --git a/400-rest/src/main/java/software/wings/sm/states/k8s/K8sRollingDeployRollback.java b/400-rest/src/main/java/software/wings/sm/states/k8s/K8sRollingDeployRollback.java
index a4ed2440e5..d96db88ffc 100644
--- a/400-rest/src/main/java/software/wings/sm/states/k8s/K8sRollingDeployRollback.java
+++ b/400-rest/src/main/java/software/wings/sm/states/k8s/K8sRollingDeployRollback.java
@@ -2,6 +2,7 @@ package software.wings.sm.states.k8s;
 
 import static io.harness.beans.ExecutionStatus.SKIPPED;
 
+import static java.util.Collections.emptyList;
 import static software.wings.sm.StateExecutionData.StateExecutionDataBuilder.aStateExecutionData;
 import static software.wings.sm.StateType.K8S_DEPLOYMENT_ROLLING_ROLLBACK;
 
@@ -77,6 +78,15 @@ public class K8sRollingDeployRollback extends AbstractK8sState {
     return StateTimeoutUtils.getTimeoutMillisFromMinutes(stateTimeoutInMinutes);
   }
 
+  @Override
+  public List<String> getDelegateSelectors(ExecutionContext context) {
+    K8sContextElement k8sContextElement = context.getContextElement(ContextElementType.K8S);
+    if (k8sContextElement == null) {
+      return emptyList();
+    }
+    return k8sContextElement.getDelegateSelectors();
+  }
+
   @Override
   public ExecutionResponse execute(ExecutionContext context) {
     try {
diff --git a/400-rest/src/main/java/software/wings/sm/states/k8s/K8sStateHelper.java b/400-rest/src/main/java/software/wings/sm/states/k8s/K8sStateHelper.java
index 1da6cc249d..36918ee136 100644
--- a/400-rest/src/main/java/software/wings/sm/states/k8s/K8sStateHelper.java
+++ b/400-rest/src/main/java/software/wings/sm/states/k8s/K8sStateHelper.java
@@ -1,15 +1,20 @@
 package software.wings.sm.states.k8s;
 
+import static io.harness.data.structure.EmptyPredicate.isEmpty;
+import static io.harness.data.structure.ListUtils.trimStrings;
 import static io.harness.data.structure.UUIDGenerator.generateUuid;
 import static io.harness.k8s.manifest.ManifestHelper.values_filename;
 import static io.harness.state.StateConstants.DEFAULT_STEADY_STATE_TIMEOUT;
 
 import static java.lang.String.format;
 import static java.util.Collections.emptyList;
+import static java.util.Collections.emptySet;
+import static java.util.stream.Collectors.toList;
 import static org.apache.commons.lang3.StringUtils.isBlank;
 import static org.apache.commons.lang3.StringUtils.isNotBlank;
 
 import io.harness.beans.DelegateTask;
+import io.harness.beans.FeatureName;
 import io.harness.beans.SweepingOutputInstance;
 import io.harness.context.ContextElementType;
 import io.harness.delegate.beans.DelegateResponseData;
@@ -63,6 +68,7 @@ import java.io.StringReader;
 import java.time.Duration;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 import lombok.extern.slf4j.Slf4j;
@@ -334,4 +340,14 @@ public class K8sStateHelper {
     }
     return (K8sElement) kryoSerializer.asInflatedObject(result.getOutput());
   }
+
+  public Set<String> getRenderedAndTrimmedSelectors(ExecutionContext context, List<String> delegateSelectors) {
+    if (!featureFlagService.isEnabled(FeatureName.CDP_DELEGATE_SELECTORS, context.getAccountId())
+            || isEmpty(delegateSelectors)) {
+      return emptySet();
+    }
+    List<String> renderedSelectors = delegateSelectors.stream().map(context::renderExpression).collect(toList());
+    List<String> trimmedSelectors = trimStrings(renderedSelectors);
+    return new HashSet<>(trimmedSelectors);
+  }
 }
diff --git a/940-feature-flag/src/main/java/io/harness/beans/FeatureName.java b/940-feature-flag/src/main/java/io/harness/beans/FeatureName.java
index f5e2409bde..b70a44822d 100644
--- a/940-feature-flag/src/main/java/io/harness/beans/FeatureName.java
+++ b/940-feature-flag/src/main/java/io/harness/beans/FeatureName.java
@@ -21,6 +21,7 @@ public enum FeatureName {
   AZURE_ARM,
   BIND_FETCH_FILES_TASK_TO_DELEGATE,
   CDNG_ENABLED,
+  CDP_DELEGATE_SELECTORS,
   CENG_ENABLED,
   CE_ANOMALY_DETECTION,
   CE_BILLING_DATA_PRE_AGGREGATION,
-- 
2.24.3 (Apple Git-128)

