extend type Query {
  k8sWorkloadRecommendations(filters: [WorkloadFilter], limit: Int!, offset: Int): WorkloadRecommendationConnection
    @dataFetcher(name: k8sWorkloadRecommendations)
  k8sWorkloadHistogram(
    cluster: String!
    namespace: String!
    workloadName: String!
    workloadType: String!
    startDate: DateTime!
    endDate: DateTime!
  ): WorkloadHistogramData @dataFetcher(name: k8sWorkloadHistogram)
}

input WorkloadFilter {
  cluster: IdFilter
  namespace: IdFilter
  workloadName: IdFilter
  workloadType: IdFilter
}

type WorkloadRecommendationConnection {
  pageInfo: PageInfo
  nodes: [WorkloadRecommendation]
}

type WorkloadRecommendation {
  clusterId: String
  clusterName: String
  namespace: String
  workloadType: String
  workloadName: String
  containerRecommendations: [ContainerRecommendation]
  estimatedSavings: Number
  numDays: Int
  preset: K8sWorkloadRecommendationPreset
}

type ContainerRecommendation {
  containerName: String
  current: ResourceRequirements
  burstable: ResourceRequirements
  guaranteed: ResourceRequirements
  recommended: ResourceRequirements
  numDays: Int
  totalSamplesCount: Int
}

type ResourceRequirements {
  yaml: String
  limits: [ResourceEntry]
  requests: [ResourceEntry]
}

type ResourceEntry {
  name: String
  quantity: String
}

type WorkloadHistogramData {
  containerHistogramDataList: [ContainerHistogramData]
}

type ContainerHistogramData {
  containerName: String
  cpuHistogram: HistogramExp
  memoryHistogram: HistogramExp
}

type HistogramExp {
  firstBucketSize: Number
  growthRatio: Number
  numBuckets: Int
  bucketWeights: [Number]
  totalWeight: Number
  precomputed: [Number]
}

type K8sWorkloadRecommendationPreset {
  cpuRequest: Number
  cpuLimit: Number
  memoryRequest: Number
  memoryLimit: Number
  safetyMargin: Number
  minCpuMilliCores: Long
  minMemoryBytes: Long
}
