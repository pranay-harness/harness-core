# Copyright 2021 Harness Inc. All rights reserved.
# Use of this source code is governed by the PolyForm Shield 1.0.0 license
# that can be found in the licenses directory at the root of this repository, also available at
# https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.

extend type Query {
  # Get statistics about Billing
  billingStatsTimeSeries(
    limit: Int
    includeOthers: Boolean
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
    sortCriteria: [BillingSortCriteria]
  ): BillingStackedTimeSeriesData @dataFetcher(name: billingStatsTimeSeries)

  # Get statistics about GCP Billing
  gcpBillingTimeSeriesStats(
    filters: [CCMFilter]
    aggregateFunction: CCMAggregationFunction
    groupBy: [CCMGroupBy]
  ): GcpBillingTimeSeriesStats @dataFetcher(name: gcpBillingTimeSeriesStats)

  # Get statistics about Billing Trend
  billingTrendStats(
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
  ): BillingStatsData @dataFetcher(name: billingTrendStats)

  # Get information about Billing Forecast Cost
  billingForecastCost(
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
  ): BillingStatsData @dataFetcher(name: billingForecastCost)

  # Get statistics about GCP Billing Trend
  gcpBillingTrendStats(filters: [CCMFilter]): BillingStatsData @dataFetcher(name: gcpBillingTrendStats)

  # Get statistics about Idle Cost Trend
  idleCostTrendStats(
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
  ): IdleCostStatsData @dataFetcher(name: idleCostTrendStats)

  # Get information about Billing Stats Entity
  billingStatsEntity(
    limit: Int
    offset: Int
    includeOthers: Boolean
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
    sortCriteria: [BillingSortCriteria]
  ): BillingEntityData @dataFetcher(name: billingStatsEntity)

  # Get information about GCP Billing Entity Data
  gcpBillingEntityData(
    filters: [CloudBillingFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CloudBillingGroupBy]
  ): GcpBillingEntityData @dataFetcher(name: gcpBillingEntityStats)

  # Get values for Billing Stats Filter
  billingStatsFilterValues(
    limit: Int
    offset: Int
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
    sortCriteria: [BillingSortCriteria]
  ): BillingFilterData @dataFetcher(name: billingStatsFilterValues)

  # Get values for Billing Job Processed Values
  billingJobProcessedValues: BillingJobProcessedData @dataFetcher(name: billingJobProcessed)

  # Get statistics about Efficiency
  efficiencyStats(
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
  ): EfficiencyStatsData @dataFetcher(name: efficiencyStats)

  # Get statistics about Sunburst Chart
  sunburstChartStats(
    limit: Int
    includeOthers: Boolean
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
    sortCriteria: [BillingSortCriteria]
  ): SunburstChartData @dataFetcher(name: sunburstChartStats)

  # Get details about Node and Pod
  nodeAndPodDetails(
    limit: Int
    offset: Int
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    groupBy: [CCMGroupBy]
    sortCriteria: [BillingSortCriteria]
  ): NodeAndPodData @dataFetcher(name: nodeAndPodDetails)

  # Get information about CE Active Pod Count
  ceActivePodCount(
    filters: [CCMFilter]
    aggregateFunction: [CCMAggregationFunction]
    sortCriteria: [BillingSortCriteria]
  ): PodCountTimeSeriesData @dataFetcher(name: ceActivePodCount)
}

# Set CCM aggregation function
input CCMAggregationFunction {
  operationType: CCMAggregateOperation
  columnName: String
}

# Possible entity values for CCM aggregate operation
enum CCMAggregateOperation {
  SUM
  MAX
  MIN
  AVG
  COUNT
}

input CCMGroupBy {
  entityGroupBy: CCMEntityGroupBy
  timeTruncGroupby: CETimeTruncGroupby
  timeAggregation: CCMTimeSeriesAggregation
  tagAggregation: BillingDataTagAggregation
  labelAggregation: BillingDataLabelAggregation
}

# Possible CCM entity group by values
enum CCMEntityGroupBy {
  Application
  Service
  Cluster
  StartTime
  Environment
  Region
  CloudServiceName
  TaskId
  InstanceType
  LaunchType
  WorkloadName
  WorkloadType
  Namespace
  ClusterType
  ClusterName
  CloudProvider
  PROJECT
  Node
  Pod
  PV
}

input CETimeTruncGroupby {
  resolution: TimeGroupType
}

# Aggregate CCM by time aggregators
input CCMTimeSeriesAggregation {
  timeGroupType: TimeGroupType
}

# Aggregate by Billing Data tag
input BillingDataTagAggregation {
  entityType: BillingDataTagType
  tagName: String
}

# Aggregate by Billing Data label
input BillingDataLabelAggregation {
  name: String
}

# Set sort criteria
input BillingSortCriteria {
  sortType: BillingSortType
  sortOrder: SortOrder
}

# Possible Billing Sort Type values
enum BillingSortType {
  Time
  Amount
  storageCost
  IdleCost
  Application
  Service
  Cluster
  Environment
  CloudServiceName
  TaskId
  LaunchType
  WorkloadName
  Namespace
  CloudProvider
  Node
  Pod
}

# Define Billing Entity Data Point type
type BillingEntityDataPoint {
  id: String
  name: String
  type: String
  totalCost: Number
  idleCost: Number
  cpuIdleCost: Number
  memoryIdleCost: Number
  costTrend: Number
  trendType: String
  region: String
  launchType: String
  cloudServiceName: String
  workloadName: String
  workloadType: String
  namespace: String
  clusterType: String
  clusterId: String
  label: String
  totalNamespaces: Number
  totalWorkloads: Number
  maxCpuUtilization: Number
  maxMemoryUtilization: Number
  avgCpuUtilization: Number
  avgMemoryUtilization: Number
  unallocatedCost: Number
  networkCost: Number
  appId: String
  appName: String
  clusterName: String
  efficiencyScore: Number
  efficiencyScoreTrend: Number
  storageCost: Number
  memoryBillingAmount: Number
  cpuBillingAmount: Number
  storageUnallocatedCost: Number
  memoryUnallocatedCost: Number
  cpuUnallocatedCost: Number
  storageRequest: Number
  storageUtilizationValue: Number
  storageActualIdleCost: Number
}

# Define GCP Billing Entity Data Point type
type GcpBillingEntityDataPoint {
  id: String
  name: String
  projectNumber: String
  totalCost: Number
  discounts: Number
  subTotal: Number
  productType: String
  usage: String
  region: String
}

# Define Billing Entity Data type
type GcpBillingEntityData {
  data: [GcpBillingEntityDataPoint]
}

# Define Sunburst Chart Data type
type SunburstChartData {
  totalCost: Number
  gridData: [SunburstGridDataPoint]
}

# Define Sunburst Chart Data Point type
type SunburstChartDataPoint {
  id: String
  parent: String
  name: String
  type: String
  value: Number
  clusterType: String
  instanceType: String
  metadata: SunburstGridDataPoint
}

# Define Sunburst Grid Data Point type
type SunburstGridDataPoint {
  id: String
  name: String
  type: String
  clusterType: String
  trend: Number
  value: Number
  efficiencyScore: Number
}

# Define Billing Entity Data type
type BillingEntityData {
  data: [BillingEntityDataPoint]
  info: String
}

# Define Billing Filter Data Point type
type BillingFilterDataPoint {
  cloudServiceNames: [EntityData]
  taskIds: [EntityData]
  launchTypes: [EntityData]
  workloadNames: [EntityData]
  namespaces: [EntityData]
  cloudProviders: [EntityData]
  applications: [EntityData]
  environments: [EntityData]
  services: [EntityData]
  clusters: [EntityData]
  instances: [EntityData]
  k8sLabels: [K8sLabel]
  tags: [Tags]
}

# Define Tags type
type Tags {
  name: String
  values: [String]
}

# Define Entity Data type
type EntityData {
  name: String
  id: String
  type: String
}

# Define Billing Filter Data type
type BillingFilterData {
  data: [BillingFilterDataPoint]
  isHourlyDataPresent: Boolean
  total: Number
}

# Define Billing Job Processing Data type
type BillingJobProcessedData {
  lastProcessedTime: DateTime
}

# Define Billing Stats Data type
type BillingStatsData {
  totalCost: BillingStatsInfo
  costTrend: BillingStatsInfo
  forecastCost: BillingStatsInfo
  idleCost: BillingStatsInfo
  utilizedCost: BillingStatsInfo
  unallocatedCost: BillingStatsInfo
  systemCost: BillingStatsInfo
  efficiencyScore: BillingStatsInfo
}

# Define Efficiency Stats Data type
type EfficiencyStatsData {
  context: ContextInfo
  efficiencyBreakdown: StatsBreakdownInfo
  efficiencyData: EfficiencyInfo
}

# Define Idle Cost Stats Data type
type IdleCostStatsData {
  totalIdleCost: BillingStatsInfo
  cpuIdleCost: BillingStatsInfo
  memoryIdleCost: BillingStatsInfo
  storageIdleCost: BillingStatsInfo
  unallocatedCost: BillingStatsInfo
}

# Define Billing Stacked Time Series Data type
type BillingStackedTimeSeriesData {
  data: [BillingStackedTimeSeriesDataPoint]
  cpuIdleCost: [BillingStackedTimeSeriesDataPoint]
  memoryIdleCost: [BillingStackedTimeSeriesDataPoint]
  cpuUtilMetrics: [BillingStackedTimeSeriesDataPoint]
  memoryUtilMetrics: [BillingStackedTimeSeriesDataPoint]
  cpuUtilValues: [BillingStackedTimeSeriesDataPoint]
  memoryUtilValues: [BillingStackedTimeSeriesDataPoint]
  cpuRequest: [BillingStackedTimeSeriesDataPoint]
  memoryRequest: [BillingStackedTimeSeriesDataPoint]
  cpuLimit: [BillingStackedTimeSeriesDataPoint]
  memoryLimit: [BillingStackedTimeSeriesDataPoint]
  label: String
  info: String
}

# Define GCP Billing Time Series Stats type
type GcpBillingTimeSeriesStats {
  stats: [TimeSeriesDataPoints]
}

# Define Time Series Data Point type
type TimeSeriesDataPoints {
  values: [DataPoint]
  time: DateTime
}

# Define Billing Stacked Time Series Data Point type
type BillingStackedTimeSeriesDataPoint {
  values: [BillingDataPoint]
  time: DateTime
}

# Define Billing Data Point type
type BillingDataPoint {
  key: Reference # Key refers to the label
  value: Number
}

# Define Billing Stats Info type
type BillingStatsInfo {
  statsLabel: String
  statsDescription: String
  statsValue: String
  statsTrend: String
  value: Number
}

# Define Context Info type
type ContextInfo {
  totalCost: Number
  costTrend: Number
  totalCostDescription: String
}

# Define Stats Breakdown Info type
type StatsBreakdownInfo {
  total: Number
  utilized: Number
  idle: Number
  unallocated: Number
}

# Define Efficiency Info type
type EfficiencyInfo {
  efficiencyScore: Number
  trend: Number
}

# Define Resource Stats Info type
type ResourceStatsInfo {
  type: String
  info: StatsBreakdownInfo
}

# Set CCM filter criteria
input CCMFilter {
  # Filter by Application id
  application: IdFilter
  # Filter by Service id
  service: IdFilter
  # Filter by Environment id
  environment: IdFilter
  # Filter by Cluster id
  cluster: IdFilter
  # Filter by Cloud Service Name id
  cloudServiceName: IdFilter
  # Filter by Launch Type id
  launchType: IdFilter
  # Filter by Task id
  taskId: IdFilter
  # Filter by Namespace id
  namespace: IdFilter
  # Filter by Workload Name id
  workloadName: IdFilter
  # Filter by Workload Type id
  workloadType: IdFilter
  # Filter by start time
  startTime: TimeFilter
  # Filter by end time
  endTime: TimeFilter
  # Filter by Cloud Provider id
  cloudProvider: IdFilter
  # Filter by Billing Data Tag
  tag: BillingDataTagFilter
  # Filter Billing Data Label
  label: BillingDataLabelFilter
  # Filter by Node Instance id
  nodeInstanceId: IdFilter
  # Filter by Pod Instance id
  podInstanceId: IdFilter
  # Filter by Parent Instance id
  parentInstanceId: IdFilter
  # Filter by CE Environment Type
  envType: CEEnvironmentTypeFilter
  # Filter by Label Search id
  labelSearch: IdFilter
  # Filter by Tag Search id
  tagSearch: IdFilter
  # Filter by Instance Type id
  instanceType: IdFilter
  # Filter by Storage Utilization Value
  storageUtilizationValue: NumberFilter
}

# Set Billing Data Label Filter
input BillingDataLabelFilter {
  operator: IdOperator
  labels: [K8sLabelInput]
}

# Set Billing Data Tag Filter
input BillingDataTagFilter {
  operator: IdOperator
  entityType: BillingDataTagType
  tags: [TagInput]
}

# Possible Billing Data Tag Type values
enum BillingDataTagType {
  APPLICATION
  SERVICE
  ENVIRONMENT
}

# Set CE Environment Type filter criteria
input CEEnvironmentTypeFilter {
  # Filter by Environment Type
  type: EnvType
}

# Possible Environment Type values
enum EnvType {
  ALL
  PROD
  NON_PROD
}

# Define Node and Pod Data type
type NodeAndPodData {
  data: [NodeAndPodDataPoint]
  pvData: [PVDataPoint]
  info: String
}

# Define PV Data Point type
type PVDataPoint {
  id: String
  instanceId: String
  instanceName: String
  claimName: String
  claimNamespace: String
  clusterName: String
  clusterId: String
  storageClass: String
  volumeType: String
  cloudProvider: String
  region: String

  capacity: Number
  storageRequest: Number
  storageUtilizationValue: Number

  storageCost: Number
  storageActualIdleCost: Number
  storageUnallocatedCost: Number

  createTime: Number
  deleteTime: Number
}

# Define Node and Pod Data Point type
type NodeAndPodDataPoint {
  id: String
  nodeId: String
  name: String
  namespace: String
  workload: String
  clusterName: String
  clusterId: String
  node: String
  nodePoolName: String
  cloudProviderInstanceId: String
  podCapacity: String
  totalCost: Number
  idleCost: Number
  systemCost: Number
  networkCost: Number
  unallocatedCost: Number
  cpuAllocatable: Number
  memoryAllocatable: Number
  cpuRequested: Number
  memoryRequested: Number
  cpuUnitPrice: Number
  memoryUnitPrice: Number
  instanceCategory: String
  machineType: String
  createTime: Number
  deleteTime: Number
  qosClass: String
  storageUtilizationValue: Number
  storageActualIdleCost: Number
  storageCost: Number
  memoryBillingAmount: Number
  cpuBillingAmount: Number
  storageUnallocatedCost: Number
  memoryUnallocatedCost: Number
  cpuUnallocatedCost: Number
  memoryIdleCost: Number
  cpuIdleCost: Number
  storageRequest: Number
}

# Define Pod Count Time Series Data type
type PodCountTimeSeriesData {
  data: [PodCountTimeSeriesDataPoint]
}

# Define Pod Count Time Series Data Point type
type PodCountTimeSeriesDataPoint {
  values: [PodCountDataPoint]
  time: DateTime
}

# Define Pod Count Data Point type
type PodCountDataPoint {
  key: Reference
  value: Number
}
