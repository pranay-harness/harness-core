input AwsCloudProviderInput {
  name: String!

  credentialsType: AwsCredentialsType
  ec2IamCredentials: Ec2IamCredentials
  manualCredentials: AwsManualCredentials
  irsaCredentials: IrsaCredentials

  crossAccountAttributes: AwsCrossAccountAttributes
  defaultRegion: String
}

enum AwsCredentialsType {
  EC2_IAM
  MANUAL
  IRSA
}

input Ec2IamCredentials {
  delegateSelector: String!
  usageScope: UsageScopeInput
}

input AwsManualCredentials {
  accessKey: String
  accessKeySecretId: String
  secretKeySecretId: String!
}

input IrsaCredentials {
  delegateSelector: String!
  usageScope: UsageScopeInput
}

input AwsCrossAccountAttributes {
  assumeCrossAccountRole: Boolean
  crossAccountRoleArn: String!
  externalId: String
}

input UpdateAwsCloudProviderInput {
  name: String

  credentialsType: AwsCredentialsType
  ec2IamCredentials: UpdateEc2IamCredentials
  manualCredentials: UpdateAwsManualCredentials
  irsaCredentials: UpdateIrsaCredentials

  crossAccountAttributes: UpdateAwsCrossAccountAttributes
  defaultRegion: String
}

input UpdateEc2IamCredentials {
  delegateSelector: String
  usageScope: UsageScopeInput
}

input UpdateAwsManualCredentials {
  accessKey: String
  accessKeySecretId: String
  secretKeySecretId: String
}

input UpdateIrsaCredentials {
  delegateSelector: String
  usageScope: UsageScopeInput
}

input UpdateAwsCrossAccountAttributes {
  assumeCrossAccountRole: Boolean
  crossAccountRoleArn: String
  externalId: String
}
