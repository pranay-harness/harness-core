extend type Mutation {
  # Create secret manager
  createSecretManager(input: CreateSecretManagerInput!): UpsertSecretManagerPayload
    @dataFetcher(name: createSecretManager)

  # Update secret manager
  updateSecretManager(input: UpdateSecretManagerInput!): UpsertSecretManagerPayload
    @dataFetcher(name: updateSecretManager)

  # Delete secret manager
  deleteSecretManager(input: DeleteSecretManagerInput!): DeleteSecretManagerPayload
    @dataFetcher(name: deleteSecretManager)
}

input DeleteSecretManagerInput {
  clientMutationId: String
  secretManagerId: String!
}

type DeleteSecretManagerPayload {
  clientMutationId: String
}

input CreateSecretManagerInput {
  clientMutationId: String
  secretManagerType: SecretManagerType!
  hashicorpVaultConfigInput: HashicorpVaultSecretManagerInput
}

input UpdateSecretManagerInput {
  clientMutationId: String
  secretManagerId: String!
  secretManagerType: SecretManagerType!
  hashicorpVaultConfigInput: UpdateHashicorpVaultInput
}

type UpsertSecretManagerPayload {
  clientMutationId: String
  secretManager: SecretManager
}

input HashicorpVaultSecretManagerInput {
  name: String!
  namespace: String
  vaultUrl: String!
  basePath: String
  authDetails: HashicorpVaultAuthDetails!
  secretEngineName: String!
  secretEngineVersion: Int!
  secretEngineRenewalInterval: Long!
  isDefault: Boolean
  isReadOnly: Boolean
  usageScope: UsageScopeInput
}

input UpdateHashicorpVaultInput {
  name: String
  namespace: String
  authDetails: HashicorpVaultAuthDetails
  isReadOnly: Boolean
  secretEngineRenewalInterval: Long
  isDefault: Boolean
  usageScope: UsageScopeInput
}

input HashicorpVaultAuthDetails {
  authToken: String
  appRoleId: String
  secretId: String
}
