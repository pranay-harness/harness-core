Var authTokenUrl = "https://www.googleapis.com/oauth2/v4/token"
Var authBodyMap = {}
Var:authBodyMap.put("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer")
Var:authBodyMap.put("assertion",Env:jwtToken)

Var bearerTokenResponse = sync-call(url=Var:authTokenUrl,body=Var:authBodyMap, bodyType=FORM_URL_ENCODED)
Var token = extract(Var:bearerTokenResponse, $.access_token)

Var header = {}
Var headerVal = concat("Bearer ", Var:token)
Var:header.put("Authorization", Var:headerVal)

Var params = {}
Var:params.put("interval.startTime", Env:startTime)
Var:params.put("interval.endTime", Env:endTime)
Var:params.put("aggregation.alignmentPeriod", Env:alignmentPeriod)
Var emptySpace = ""
if Env:crossSeriesReducer != Var:emptySpace {
  Var:params.put("aggregation.crossSeriesReducer", Env:crossSeriesReducer)
}
if Env:perSeriesAligner != Var:emptySpace {
  Var:params.put("aggregation.perSeriesAligner", Env:perSeriesAligner)
}
Var:params.put("filter", Env:filter)

Var url = concat(Env:baseUrl, Env:project, "/timeSeries")

Var metricResponse = sync-call(url=Var:url, header=Var:header, options=Var:params)

Var timeseriesList = extract(Var:metricResponse, $.timeSeries)
Var returnList = []
foreach timeseries in Var:timeseriesList {
    Var metricName = extract(Var:timeseries, $.metric.type)
    Var points = extract(Var:timeseries, $.points)
    foreach point in Var:points {
        Var val = extract(Var:point, $.value.doubleValue)
        Var timestamp = extract(Var:point, $.interval.endTime)
        print Var:metricName
        print Var:val
        Var tsRecord = new TimeseriesRecord(txnName=Var:metricName, metricName=Var:metricName, metricValue=Var:val, timestamp=Var:timestamp, timestampFormat= Env:timestampFormat)
        Var:returnList.append(Var:tsRecord)
    }
}
return Var:returnList