// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/harness/delegate/delegate_service.proto

package io.harness.delegate;

@javax.annotation.Generated(value = "protoc", comments = "annotations:CreatePerpetualTaskRequestOrBuilder.java.pb.meta")
public interface CreatePerpetualTaskRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.harness.delegate.CreatePerpetualTaskRequest)
    com.google.protobuf.MessageOrBuilder {
  /**
   * <code>.io.harness.delegate.AccountId account_id = 1;</code>
   */
  boolean hasAccountId();
  /**
   * <code>.io.harness.delegate.AccountId account_id = 1;</code>
   */
  io.harness.delegate.AccountId getAccountId();
  /**
   * <code>.io.harness.delegate.AccountId account_id = 1;</code>
   */
  io.harness.delegate.AccountIdOrBuilder getAccountIdOrBuilder();

  /**
   * <code>string type = 2;</code>
   */
  java.lang.String getType();
  /**
   * <code>string type = 2;</code>
   */
  com.google.protobuf.ByteString getTypeBytes();

  /**
   * <code>.io.harness.perpetualtask.PerpetualTaskSchedule schedule = 3;</code>
   */
  boolean hasSchedule();
  /**
   * <code>.io.harness.perpetualtask.PerpetualTaskSchedule schedule = 3;</code>
   */
  io.harness.perpetualtask.PerpetualTaskSchedule getSchedule();
  /**
   * <code>.io.harness.perpetualtask.PerpetualTaskSchedule schedule = 3;</code>
   */
  io.harness.perpetualtask.PerpetualTaskScheduleOrBuilder getScheduleOrBuilder();

  /**
   * <code>.io.harness.perpetualtask.PerpetualTaskClientContextDetails context = 4;</code>
   */
  boolean hasContext();
  /**
   * <code>.io.harness.perpetualtask.PerpetualTaskClientContextDetails context = 4;</code>
   */
  io.harness.perpetualtask.PerpetualTaskClientContextDetails getContext();
  /**
   * <code>.io.harness.perpetualtask.PerpetualTaskClientContextDetails context = 4;</code>
   */
  io.harness.perpetualtask.PerpetualTaskClientContextDetailsOrBuilder getContextOrBuilder();

  /**
   * <code>bool allow_duplicate = 5;</code>
   */
  boolean getAllowDuplicate();
}
