syntax = "proto3";

package io.harness.product.ci.scm.proto;

option java_multiple_files = true;
option go_package = "ciscmpb";

import "google/protobuf/timestamp.proto";

enum GitProvider {
  BITBUCKET = 0;
  GITEA = 1;
  GITHUB = 2;
  GITLAB = 3;
  GOGS = 4;
  STASH = 5;
  CODECOMMIT = 6;
}

enum Action {
  UNKNOWN = 0;
  CREATE = 1;
  UPDATE = 2;
  DELETE = 3;
  // Issues
  OPEN = 4;
  REOPEN = 5;
  CLOSE = 6;
  LABEL = 7;
  UNLABEL = 8;
  // pull requests
  SYNC = 9;
  MERGE = 10;
}

// User represents a user account.
message User {
  string login = 1;
  string name = 2;
  string email = 3;
  string avatar = 4;
  google.protobuf.Timestamp created = 5;
  google.protobuf.Timestamp updated = 6;
}

// Reference represents a git reference.
message Reference {
  string name = 1;
  string path = 2;
  string sha = 3;
}

// Perm represents a user's repository permissions.
message Perm {
  bool pull = 1;
  bool push = 2;
  bool admin = 3;
}

// Repository represents a git repository.
message Repository {
  string id = 1;
  string namespace = 2;
  string name = 3;
  Perm perm = 4;
  string branch = 5;
  bool private = 6;
  string clone = 7;
  string clone_ssh = 8;
  string link = 9;
  google.protobuf.Timestamp created = 10;
  google.protobuf.Timestamp updated = 11;
}

// Signature identifies a git commit creator.
message Signature {
  string name = 1;
  string email = 2;
  google.protobuf.Timestamp date = 3;
  string login = 4;
  string avatar = 5;
}

// Commit represents a repository commit.
message Commit {
  string sha = 1;
  string message = 2;
  Signature author = 3;
  Signature committer = 4;
  string link = 5;
}

message Label {
  string name = 1;
  string color = 2;
}

message PullRequest {
  int64 number = 1;
  string title = 2;
  string body = 3;
  string sha = 4;
  string ref = 5;
  string source = 6;
  string target = 7;
  string fork = 8;
  string link = 9;
  bool closed = 10;
  bool merged = 11;
  Reference base = 12;
  Reference head = 13;
  User author = 14;
  google.protobuf.Timestamp created = 15;
  google.protobuf.Timestamp updated = 16;
  repeated Label labels = 17;
}

message PullRequestHook {
  Action action = 1;
  Repository repo = 2;
  PullRequest pr = 3;
  User sender = 4;
}

message IssueCommentHook {
  Action action = 1;
  Repository repo = 2;
  Issue issue = 3;
  User sender = 4;
  Comment comment = 5;
}

message Comment {
  int32 id = 1;
  string body = 2;
  User user = 3;
  google.protobuf.Timestamp created = 4;
  google.protobuf.Timestamp updated = 5;
}

message Issue {
  int32 number = 1;
  string title = 2;
  string body = 3;
  string link = 4;
  repeated string labels = 5;
  bool closed = 6;
  bool locked = 7;
  User user = 8;
  PullRequest pr = 9;
  google.protobuf.Timestamp created = 10;
  google.protobuf.Timestamp updated = 11;
}

message PushHook {
  string ref = 1;
  string base_ref = 2;
  Repository repo = 3;
  string before = 4;
  string after = 5;
  Commit commit = 6;
  User sender = 7;
  repeated Commit commits = 8;  // List of commits associated with the push request
}

message Header {
  message Pair {
    string key = 1;
    repeated string values = 2;
  }
  repeated Pair fields = 1;
}

message ParseWebhookRequest {
  Header header = 1;
  string body = 2;
  string secret = 3;
  GitProvider provider = 4;
}

message ParseWebhookResponse {
  oneof hook {
    PullRequestHook pr = 1;
    PushHook push = 2;
    IssueCommentHook comment = 3;
  }
}

message GithubApp {
  string app_id = 1;
  string private_key = 2;
}

message GithubProvider {
  oneof provider {
    string access_token = 1;
    GithubApp github_app = 2;
  }
}

message GitlabProvider {
  oneof provider {
    string access_token = 1;
    string personal_token = 2;
  }
}

message GiteaProvider {
  string access_token = 1;
}

message BitbucketCloudProvider {
  string username = 1;
  string app_password = 2;
}

message BitbucketServerProvider {
  string access_token = 1;
  string personal_token = 2;
}

message CodecommitProvider {
  string access_key = 1;
  string secret_key = 2;
}

message Provider {
  oneof hook {
    GithubProvider github = 1;
    GitlabProvider gitlab = 2;
    GiteaProvider gitea = 3;
    BitbucketCloudProvider bitbucket_cloud = 4;
    BitbucketServerProvider bitbucket_server = 5;
    CodecommitProvider codecommit = 6;
  }
  string endpoint = 7;
  bool skipVerify = 8;
  bool debug = 9;
}

message GetFileRequest {
  string slug = 1;
  string path = 2;
  oneof type {
    string branch = 3;
    string ref = 4;
  }
  Provider provider = 5;
}

message GetBatchFileRequest {
  repeated GetFileRequest findRequest = 1;
}

message GetLatestFileRequest {
  string slug = 1;
  string path = 2;
  string branch = 3;
  Provider provider = 4;
}

message DeleteFileRequest {
  string slug = 1;
  string path = 2;
  oneof type {
    string branch = 3;
    string ref = 4;
  }
  Provider provider = 5;
}

message DeleteFileResponse {
  int32 status = 1;
}

message CreateFileResponse {
  int32 status = 1;
}

message UpdateFileResponse {
  int32 status = 1;
}

message FileModifyRequest {
  string slug = 1;
  string path = 2;
  string branch = 3;
  string content = 4;
  string message = 5;
  string commit_id = 6;
  string blob_id = 7;
  Signature signature = 8;
  Provider provider = 9;
}

message FileContent {
  string content = 1;
  int32 status = 2;
  string path = 3;
  string commit_id = 4;
  string blob_id = 5;
}

message FileBatchContentResponse {
  repeated FileContent file_contents = 1;
}

message FindFilesInBranchRequest {
  string slug = 1;
  string branch = 2;
  string path = 3;
  Provider provider = 4;
}

message FindFilesInCommitRequest {
  string slug = 1;
  string ref = 2;
  string path = 3;
  Provider provider = 4;
}

enum ContentType {
  UNKNOWN_CONTENT = 0;
  FILE = 1;
  DIRECTORY = 2;
  SYMLINK = 3;
  GITLINK = 4;
}

message FileChange {
  string path = 1;
  ContentType content_type = 2;
  string commit_id = 3;
  string blob_id = 4;
}

message IsLatestFileRequest {
  string slug = 1;
  string path = 2;
  oneof type {
    string branch = 3;
    string ref = 4;
  }
  string commit_id = 5;
  string blob_id = 6;
  Provider provider = 7;
}

message IsLatestFileResponse {
  bool latest = 1;
}

message FindFilesInBranchResponse {
  repeated FileChange file = 1;
}

message FindFilesInCommitResponse {
  repeated FileChange file = 1;
}

message CreatePRRequest {
  string slug = 1;
  string title = 2;
  string body = 3;
  string source = 4;
  string target = 5;
  Provider provider = 6;
}

message CreatePRResponse {
  int32 status = 1;
}

message CreateBranchRequest {
  string slug = 1;
  string name = 2;
  string commit_id = 3;
  Provider provider = 4;
}

message CreateBranchResponse {
  int32 status = 1;
}

message GetLatestCommitRequest {
  string slug = 1;
  string branch = 2;
  Provider provider = 3;
}

message GetLatestCommitResponse {
  string commit_id = 1;
}

message ListBranchesRequest {
  string slug = 1;
  Provider provider = 2;
}

message ListBranchesResponse {
  repeated string branches = 1;
}

message ListCommitsRequest {
  string slug = 1;
  oneof type {
    string branch = 2;
    string ref = 3;
  }
  Provider provider = 4;
}

message ListCommitsResponse {
  repeated string commit_ids = 1;
}

service SCM {
  // RPC to stop tailing on a file.
  rpc ParseWebhook(ParseWebhookRequest) returns (ParseWebhookResponse);

  // File functions
  rpc GetFile(GetFileRequest) returns (FileContent);
  rpc GetBatchFile(GetBatchFileRequest) returns (FileBatchContentResponse);
  rpc GetLatestFile(GetLatestFileRequest) returns (FileContent);
  rpc IsLatestFile(IsLatestFileRequest) returns (IsLatestFileResponse);
  rpc FindFilesInBranch(FindFilesInBranchRequest) returns (FindFilesInBranchResponse);
  rpc FindFilesInCommit(FindFilesInCommitRequest) returns (FindFilesInCommitResponse);
  rpc PushFile(FileModifyRequest) returns (FileContent);
  // helpers
  rpc CreateFile(FileModifyRequest) returns (CreateFileResponse);
  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse);
  rpc UpdateFile(FileModifyRequest) returns (UpdateFileResponse);

  // Git functions. branch and commits
  rpc CreatePR(CreatePRRequest) returns (CreatePRResponse);
  rpc CreateBranch(CreateBranchRequest) returns (CreateBranchResponse);
  rpc GetLatestCommit(GetLatestCommitRequest) returns (GetLatestCommitResponse);
  rpc ListBranches(ListBranchesRequest) returns (ListBranchesResponse);
  rpc ListCommits(ListCommitsRequest) returns (ListCommitsResponse);
}