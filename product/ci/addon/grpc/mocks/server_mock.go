// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package grpc is a generated GoMock package.
package grpc

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCIAddonServer is a mock of CIAddonServer interface.
type MockCIAddonServer struct {
	ctrl     *gomock.Controller
	recorder *MockCIAddonServerMockRecorder
}

// MockCIAddonServerMockRecorder is the mock recorder for MockCIAddonServer.
type MockCIAddonServerMockRecorder struct {
	mock *MockCIAddonServer
}

// NewMockCIAddonServer creates a new mock instance.
func NewMockCIAddonServer(ctrl *gomock.Controller) *MockCIAddonServer {
	mock := &MockCIAddonServer{ctrl: ctrl}
	mock.recorder = &MockCIAddonServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCIAddonServer) EXPECT() *MockCIAddonServerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockCIAddonServer) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockCIAddonServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCIAddonServer)(nil).Start))
}

// Stop mocks base method.
func (m *MockCIAddonServer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockCIAddonServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCIAddonServer)(nil).Stop))
}
