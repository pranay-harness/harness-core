// Code generated by MockGen. DO NOT EDIT.
// Source: reporter.go

// Package testreports is a generated GoMock package.
package testreports

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "github.com/wings-software/portal/product/ci/ti-service/types"
	reflect "reflect"
)

// MockTestReporter is a mock of TestReporter interface.
type MockTestReporter struct {
	ctrl     *gomock.Controller
	recorder *MockTestReporterMockRecorder
}

// MockTestReporterMockRecorder is the mock recorder for MockTestReporter.
type MockTestReporterMockRecorder struct {
	mock *MockTestReporter
}

// NewMockTestReporter creates a new mock instance.
func NewMockTestReporter(ctrl *gomock.Controller) *MockTestReporter {
	mock := &MockTestReporter{ctrl: ctrl}
	mock.recorder = &MockTestReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestReporter) EXPECT() *MockTestReporterMockRecorder {
	return m.recorder
}

// GetTests mocks base method.
func (m *MockTestReporter) GetTests(arg0 context.Context) (<-chan *types.TestCase, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTests", arg0)
	ret0, _ := ret[0].(<-chan *types.TestCase)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// GetTests indicates an expected call of GetTests.
func (mr *MockTestReporterMockRecorder) GetTests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTests", reflect.TypeOf((*MockTestReporter)(nil).GetTests), arg0)
}
