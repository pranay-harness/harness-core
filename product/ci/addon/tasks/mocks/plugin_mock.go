// Code generated by MockGen. DO NOT EDIT.
// Source: plugin.go

// Package steps is a generated GoMock package.
package steps

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPluginTask is a mock of PluginTask interface.
type MockPluginTask struct {
	ctrl     *gomock.Controller
	recorder *MockPluginTaskMockRecorder
}

// MockPluginTaskMockRecorder is the mock recorder for MockPluginTask.
type MockPluginTaskMockRecorder struct {
	mock *MockPluginTask
}

// NewMockPluginTask creates a new mock instance.
func NewMockPluginTask(ctrl *gomock.Controller) *MockPluginTask {
	mock := &MockPluginTask{ctrl: ctrl}
	mock.recorder = &MockPluginTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginTask) EXPECT() *MockPluginTaskMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockPluginTask) Run(ctx context.Context) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockPluginTaskMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPluginTask)(nil).Run), ctx)
}
