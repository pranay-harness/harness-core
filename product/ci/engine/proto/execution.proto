syntax = "proto3";

package io.harness.product.ci.engine.proto;

option java_multiple_files = true;
option go_package = "cienginepb";

import "product/ci/engine/proto/artifact.proto";

message StepContext {
  int32 num_retries = 1;
  int64 execution_timeout_secs = 2;
}

message PublishArtifactsStep {
  repeated UploadFile files = 1;
  repeated BuildPublishImage images = 2;
}

message TestIntelligenceStep {
  string goals = 1;
  string language = 2;   // repo language for running tests. Java | Python | Go etc.
  string buildTool = 3;  // build tool used for running tests. maven | bazel | gradle.
  StepContext context = 4;
  uint32 container_port = 5;  // Port of the container on which run step needs to be executed.
}

message RunStep {
  repeated string commands = 1;
  StepContext context = 2;
  repeated string envVarOutputs = 3;  // produced output variables
  uint32 container_port = 4;          // Port of the container on which run step needs to be executed
}

message PluginStep {
  string image = 1;
  StepContext context = 2;
  uint32 container_port = 3;    // Port of the container on which plugin step needs to be executed
  string image_secret_env = 4;  // Name of environment variable that stores the docker image secret.
                                // If not set, plugin is public.
}

message SaveCacheStep {
  string key = 1;
  repeated string paths = 2;
}

message RestoreCacheStep {
  string key = 1;
  bool fail_if_not_exist = 2;
}

message UnitStep {
  string id = 1;
  string display_name = 2;
  oneof step {
    RunStep run = 3;
    SaveCacheStep save_cache = 4;
    RestoreCacheStep restore_cache = 5;
    PublishArtifactsStep publish_artifacts = 6;
    PluginStep plugin = 9;
    TestIntelligenceStep testIntelligence = 10;
  }
  string callback_token = 7;
  string task_id = 8;
}

message ParallelStep {
  string id = 1;
  string display_name = 2;
  repeated UnitStep steps = 3;
}

message Step {
  oneof step {
    ParallelStep parallel = 1;
    UnitStep unit = 2;
  }
}

message Execution {
  repeated Step steps = 1;
  string account_id = 2;
}

message UpdateStateRequest {
  enum Action {
    UNKNOWN = 0;
    PAUSE = 1;
    RESUME = 2;
  }
  Action action = 1;
}

message UpdateStateResponse {}

message GetImageEntrypointRequest {
  string id = 1;
  string image = 2;
  string secret = 3;  // docker config secret for image
}

message GetImageEntrypointResponse {
  repeated string entrypoint = 1;
  repeated string args = 2;
}

service LiteEngine {
  // Synchronous RPC to execute a step
  rpc UpdateState(UpdateStateRequest) returns (UpdateStateResponse);

  // Synchronous RPC to fetch image entrypoint
  rpc GetImageEntrypoint(GetImageEntrypointRequest) returns (GetImageEntrypointResponse);
}