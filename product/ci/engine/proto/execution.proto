syntax = "proto3";

package io.harness.product.ci.engine.proto;

option java_multiple_files = true;
option go_package = "cienginepb";

// Import CI Addon protos since step definitions
// will closely resemble the protobufs there.
import "product/ci/addon/proto/addon.proto";

message PublishArtifactsStep {
  repeated io.harness.product.ci.addon.proto.UploadFile files = 1;
  repeated io.harness.product.ci.addon.proto.BuildPublishImage images = 2;
}

message StepContext {
  int32 num_retries = 1;
  int64 execution_timeout_secs = 2;
}

message RunStep {
  repeated string commands = 1;
  StepContext context = 2;
  repeated string envVarOutputs = 3;  // produced output variables
}

message SaveCacheStep {
  string key = 1;
  repeated string paths = 2;
}

message RestoreCacheStep {
  string key = 1;
  bool fail_if_not_exist = 2;
}

message UnitStep {
  string id = 1;
  string display_name = 2;
  oneof step {
    RunStep run = 3;
    SaveCacheStep save_cache = 4;
    RestoreCacheStep restore_cache = 5;
    PublishArtifactsStep publish_artifacts = 6;
  }
}

message ParallelStep {
  string id = 1;
  string display_name = 2;
  repeated UnitStep steps = 3;
}

message Step {
  oneof step {
    ParallelStep parallel = 1;
    UnitStep unit = 2;
  }
}

message Execution {
  repeated Step steps = 1;
}

// StageOutput is combination of outputs produced by steps in a stage. It can be referenced
// by a step using expression values e.g. JEXL. At start of a stage, stage output is empty.
message StageOutput {
  // StepOutput is output produced by a step. Currently, only run step can produce outputs.
  message StepOutput {
    string step_id = 1;
    map<string, string> output = 2;
  }
  repeated StepOutput step_outputs = 1;
}

message ExecuteStepRequest {
  UnitStep step = 1;
  StageOutput stage_output = 2;
}

message ExecuteStepResponse {
  map<string, string> output = 1;  // Step output
}

message SignalStopRequest {
}

message SignalStopResponse {
}

service LiteEngine {
  // Synchronous RPC to execute a step
  rpc ExecuteStep(ExecuteStepRequest) returns (ExecuteStepResponse);

  // Synchronous RPC to send a signal to stop GRPC server
  rpc SignalStop(SignalStopRequest) returns (SignalStopResponse);
}