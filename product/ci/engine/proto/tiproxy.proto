syntax = "proto3";

package io.harness.product.ci.engine.proto;

option java_multiple_files = true;
option go_package = "cienginepb";

// Callgraph upload request object
message UploadCgRequest {
  string step_id = 1;
  string repo = 2;
  string sha = 3;
  string branch = 4;
  string cgDir = 5;
}

message UploadCgResponse {}

// Definitions to interact with TI service
message WriteTestsRequest {
  string step_id = 1;
  repeated string tests = 2;
}

message WriteTestsResponse {}

message SelectTestsRequest {
  string step_id = 1;
  string repo = 2;
  string sha = 3;
  string branch = 4;
  // List of files which have been modified in the PR. This is marshalled form of types.File{}
  // This is done to avoid redefining the structs in code as well as proto.
  // Calls via lite engine use json encoded structs and can be decoded
  // on the TI service.
  string diff_files = 5;
}

// (TODO): `tests` should ideally be a protobuf defined in a single place.
// Needs to be changed in other places as well. Right now proxy interaction
// is done using JSON.
message SelectTestsResponse {
  string selected = 1;
}

service TiProxy {
  // RPC to stream test cases from the addon
  rpc WriteTests(stream WriteTestsRequest) returns (WriteTestsResponse);

  // RPC to stream the tests to run to the addon from the TI server
  // List of changed files will (should) not be larger than 5MB.
  // However the list of tests received may be quite large and might need streaming.
  // TODO: Convert the response to a streaming response.
  rpc SelectTests(SelectTestsRequest) returns (SelectTestsResponse);

  // Upload callgraph to lite engine which forwards the call to ti service.
  rpc UploadCg(UploadCgRequest) returns (UploadCgResponse);
}