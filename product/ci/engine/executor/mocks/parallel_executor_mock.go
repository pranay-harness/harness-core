// Code generated by MockGen. DO NOT EDIT.
// Source: parallel_executor.go

// Package executor is a generated GoMock package.
package executor

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "github.com/wings-software/portal/product/ci/engine/proto"
	reflect "reflect"
)

// MockParallelExecutor is a mock of ParallelExecutor interface.
type MockParallelExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockParallelExecutorMockRecorder
}

// MockParallelExecutorMockRecorder is the mock recorder for MockParallelExecutor.
type MockParallelExecutorMockRecorder struct {
	mock *MockParallelExecutor
}

// NewMockParallelExecutor creates a new mock instance.
func NewMockParallelExecutor(ctrl *gomock.Controller) *MockParallelExecutor {
	mock := &MockParallelExecutor{ctrl: ctrl}
	mock.recorder = &MockParallelExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParallelExecutor) EXPECT() *MockParallelExecutorMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockParallelExecutor) Run(ctx context.Context, step *proto.ParallelStep) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, step)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockParallelExecutorMockRecorder) Run(ctx, step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockParallelExecutor)(nil).Run), ctx, step)
}
