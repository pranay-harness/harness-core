// Code generated by MockGen. DO NOT EDIT.
// Source: engine_client.go

// Package grpcclient is a generated GoMock package.
package grpcclient

import (
	gomock "github.com/golang/mock/gomock"
	proto "github.com/wings-software/portal/product/ci/engine/proto"
	reflect "reflect"
)

// MockLiteEngineClient is a mock of LiteEngineClient interface.
type MockLiteEngineClient struct {
	ctrl     *gomock.Controller
	recorder *MockLiteEngineClientMockRecorder
}

// MockLiteEngineClientMockRecorder is the mock recorder for MockLiteEngineClient.
type MockLiteEngineClientMockRecorder struct {
	mock *MockLiteEngineClient
}

// NewMockLiteEngineClient creates a new mock instance.
func NewMockLiteEngineClient(ctrl *gomock.Controller) *MockLiteEngineClient {
	mock := &MockLiteEngineClient{ctrl: ctrl}
	mock.recorder = &MockLiteEngineClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLiteEngineClient) EXPECT() *MockLiteEngineClientMockRecorder {
	return m.recorder
}

// CloseConn mocks base method.
func (m *MockLiteEngineClient) CloseConn() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConn")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConn indicates an expected call of CloseConn.
func (mr *MockLiteEngineClientMockRecorder) CloseConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConn", reflect.TypeOf((*MockLiteEngineClient)(nil).CloseConn))
}

// Client mocks base method.
func (m *MockLiteEngineClient) Client() proto.LiteEngineClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(proto.LiteEngineClient)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockLiteEngineClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockLiteEngineClient)(nil).Client))
}
