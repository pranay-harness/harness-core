// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package grpc is a generated GoMock package.
package grpc

import (
	gomock "github.com/golang/mock/gomock"
	proto "github.com/wings-software/portal/product/ci/addon/proto"
	reflect "reflect"
)

// MockCIAddonClient is a mock of CIAddonClient interface.
type MockCIAddonClient struct {
	ctrl     *gomock.Controller
	recorder *MockCIAddonClientMockRecorder
}

// MockCIAddonClientMockRecorder is the mock recorder for MockCIAddonClient.
type MockCIAddonClientMockRecorder struct {
	mock *MockCIAddonClient
}

// NewMockCIAddonClient creates a new mock instance.
func NewMockCIAddonClient(ctrl *gomock.Controller) *MockCIAddonClient {
	mock := &MockCIAddonClient{ctrl: ctrl}
	mock.recorder = &MockCIAddonClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCIAddonClient) EXPECT() *MockCIAddonClientMockRecorder {
	return m.recorder
}

// CloseConn mocks base method.
func (m *MockCIAddonClient) CloseConn() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConn")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConn indicates an expected call of CloseConn.
func (mr *MockCIAddonClientMockRecorder) CloseConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConn", reflect.TypeOf((*MockCIAddonClient)(nil).CloseConn))
}

// Client mocks base method.
func (m *MockCIAddonClient) Client() proto.CIAddonClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(proto.CIAddonClient)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockCIAddonClientMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockCIAddonClient)(nil).Client))
}
