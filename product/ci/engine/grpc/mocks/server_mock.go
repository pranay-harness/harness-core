// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package grpc is a generated GoMock package.
package grpc

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLiteEngineServer is a mock of LiteEngineServer interface.
type MockLiteEngineServer struct {
	ctrl     *gomock.Controller
	recorder *MockLiteEngineServerMockRecorder
}

// MockLiteEngineServerMockRecorder is the mock recorder for MockLiteEngineServer.
type MockLiteEngineServerMockRecorder struct {
	mock *MockLiteEngineServer
}

// NewMockLiteEngineServer creates a new mock instance.
func NewMockLiteEngineServer(ctrl *gomock.Controller) *MockLiteEngineServer {
	mock := &MockLiteEngineServer{ctrl: ctrl}
	mock.recorder = &MockLiteEngineServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLiteEngineServer) EXPECT() *MockLiteEngineServerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockLiteEngineServer) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockLiteEngineServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockLiteEngineServer)(nil).Start))
}

// Stop mocks base method.
func (m *MockLiteEngineServer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockLiteEngineServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockLiteEngineServer)(nil).Stop))
}
