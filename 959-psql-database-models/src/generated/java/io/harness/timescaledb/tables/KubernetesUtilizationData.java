/*
 * Copyright 2021 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/*
 * This file is generated by jOOQ.
 */
package io.harness.timescaledb.tables;

import io.harness.timescaledb.Indexes;
import io.harness.timescaledb.Public;
import io.harness.timescaledb.tables.records.KubernetesUtilizationDataRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class KubernetesUtilizationData extends TableImpl<KubernetesUtilizationDataRecord> {
  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>public.kubernetes_utilization_data</code>
   */
  public static final KubernetesUtilizationData KUBERNETES_UTILIZATION_DATA = new KubernetesUtilizationData();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<KubernetesUtilizationDataRecord> getRecordType() {
    return KubernetesUtilizationDataRecord.class;
  }

  /**
   * The column <code>public.kubernetes_utilization_data.starttime</code>.
   */
  public final TableField<KubernetesUtilizationDataRecord, OffsetDateTime> STARTTIME =
      createField(DSL.name("starttime"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

  /**
   * The column <code>public.kubernetes_utilization_data.endtime</code>.
   */
  public final TableField<KubernetesUtilizationDataRecord, OffsetDateTime> ENDTIME =
      createField(DSL.name("endtime"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

  /**
   * The column <code>public.kubernetes_utilization_data.accountid</code>.
   */
  public final TableField<KubernetesUtilizationDataRecord, String> ACCOUNTID =
      createField(DSL.name("accountid"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.kubernetes_utilization_data.settingid</code>.
   */
  public final TableField<KubernetesUtilizationDataRecord, String> SETTINGID =
      createField(DSL.name("settingid"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.kubernetes_utilization_data.instanceid</code>.
   */
  public final TableField<KubernetesUtilizationDataRecord, String> INSTANCEID =
      createField(DSL.name("instanceid"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.kubernetes_utilization_data.instancetype</code>.
   */
  public final TableField<KubernetesUtilizationDataRecord, String> INSTANCETYPE =
      createField(DSL.name("instancetype"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.kubernetes_utilization_data.cpu</code>.
   */
  public final TableField<KubernetesUtilizationDataRecord, Double> CPU =
      createField(DSL.name("cpu"), SQLDataType.DOUBLE.nullable(false), this, "");

  /**
   * The column <code>public.kubernetes_utilization_data.memory</code>.
   */
  public final TableField<KubernetesUtilizationDataRecord, Double> MEMORY =
      createField(DSL.name("memory"), SQLDataType.DOUBLE.nullable(false), this, "");

  /**
   * The column <code>public.kubernetes_utilization_data.clusterid</code>.
   */
  public final TableField<KubernetesUtilizationDataRecord, String> CLUSTERID =
      createField(DSL.name("clusterid"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.kubernetes_utilization_data.maxcpu</code>.
   */
  public final TableField<KubernetesUtilizationDataRecord, Double> MAXCPU =
      createField(DSL.name("maxcpu"), SQLDataType.DOUBLE, this, "");

  /**
   * The column <code>public.kubernetes_utilization_data.maxmemory</code>.
   */
  public final TableField<KubernetesUtilizationDataRecord, Double> MAXMEMORY =
      createField(DSL.name("maxmemory"), SQLDataType.DOUBLE, this, "");

  /**
   * The column <code>public.kubernetes_utilization_data.storagerequestvalue</code>.
   */
  public final TableField<KubernetesUtilizationDataRecord, Double> STORAGEREQUESTVALUE =
      createField(DSL.name("storagerequestvalue"), SQLDataType.DOUBLE, this, "");

  /**
   * The column <code>public.kubernetes_utilization_data.storageusagevalue</code>.
   */
  public final TableField<KubernetesUtilizationDataRecord, Double> STORAGEUSAGEVALUE =
      createField(DSL.name("storageusagevalue"), SQLDataType.DOUBLE, this, "");

  /**
   * The column <code>public.kubernetes_utilization_data.actualinstanceid</code>.
   */
  public final TableField<KubernetesUtilizationDataRecord, String> ACTUALINSTANCEID =
      createField(DSL.name("actualinstanceid"), SQLDataType.CLOB, this, "");

  private KubernetesUtilizationData(Name alias, Table<KubernetesUtilizationDataRecord> aliased) {
    this(alias, aliased, null);
  }

  private KubernetesUtilizationData(Name alias, Table<KubernetesUtilizationDataRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.kubernetes_utilization_data</code> table reference
   */
  public KubernetesUtilizationData(String alias) {
    this(DSL.name(alias), KUBERNETES_UTILIZATION_DATA);
  }

  /**
   * Create an aliased <code>public.kubernetes_utilization_data</code> table reference
   */
  public KubernetesUtilizationData(Name alias) {
    this(alias, KUBERNETES_UTILIZATION_DATA);
  }

  /**
   * Create a <code>public.kubernetes_utilization_data</code> table reference
   */
  public KubernetesUtilizationData() {
    this(DSL.name("kubernetes_utilization_data"), null);
  }

  public <O extends Record> KubernetesUtilizationData(
      Table<O> child, ForeignKey<O, KubernetesUtilizationDataRecord> key) {
    super(child, key, KUBERNETES_UTILIZATION_DATA);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.KUBERNETES_UTILIZATION_DATA_ACCID_CLUSTERID_ACINSTANCEID,
        Indexes.KUBERNETES_UTILIZATION_DATA_INSTANCEID_INDEX, Indexes.KUBERNETES_UTILIZATION_DATA_STARTTIME_IDX,
        Indexes.KUBERNETES_UTILIZATION_DATA_UNIQUE_INDEX);
  }

  @Override
  public KubernetesUtilizationData as(String alias) {
    return new KubernetesUtilizationData(DSL.name(alias), this);
  }

  @Override
  public KubernetesUtilizationData as(Name alias) {
    return new KubernetesUtilizationData(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public KubernetesUtilizationData rename(String name) {
    return new KubernetesUtilizationData(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public KubernetesUtilizationData rename(Name name) {
    return new KubernetesUtilizationData(name, null);
  }

  // -------------------------------------------------------------------------
  // Row14 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row14<OffsetDateTime, OffsetDateTime, String, String, String, String, Double, Double, String, Double, Double,
      Double, Double, String>
  fieldsRow() {
    return (Row14) super.fieldsRow();
  }
}
