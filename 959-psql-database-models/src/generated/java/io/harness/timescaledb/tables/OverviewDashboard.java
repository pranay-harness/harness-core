/*
 * This file is generated by jOOQ.
 */
package io.harness.timescaledb.tables;

import io.harness.timescaledb.Indexes;
import io.harness.timescaledb.Public;
import io.harness.timescaledb.tables.records.OverviewDashboardRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class OverviewDashboard extends TableImpl<OverviewDashboardRecord> {
  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>public.overview_dashboard</code>
   */
  public static final OverviewDashboard OVERVIEW_DASHBOARD = new OverviewDashboard();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<OverviewDashboardRecord> getRecordType() {
    return OverviewDashboardRecord.class;
  }

  /**
   * The column <code>public.overview_dashboard.starttime</code>.
   */
  public final TableField<OverviewDashboardRecord, OffsetDateTime> STARTTIME =
      createField(DSL.name("starttime"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

  /**
   * The column <code>public.overview_dashboard.endtime</code>.
   */
  public final TableField<OverviewDashboardRecord, OffsetDateTime> ENDTIME =
      createField(DSL.name("endtime"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

  /**
   * The column <code>public.overview_dashboard.accountid</code>.
   */
  public final TableField<OverviewDashboardRecord, String> ACCOUNTID =
      createField(DSL.name("accountid"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.overview_dashboard.settingid</code>.
   */
  public final TableField<OverviewDashboardRecord, String> SETTINGID =
      createField(DSL.name("settingid"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.overview_dashboard.instanceid</code>.
   */
  public final TableField<OverviewDashboardRecord, String> INSTANCEID =
      createField(DSL.name("instanceid"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.overview_dashboard.instancetype</code>.
   */
  public final TableField<OverviewDashboardRecord, String> INSTANCETYPE =
      createField(DSL.name("instancetype"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.overview_dashboard.cpu</code>.
   */
  public final TableField<OverviewDashboardRecord, Double> CPU =
      createField(DSL.name("cpu"), SQLDataType.DOUBLE.nullable(false), this, "");

  /**
   * The column <code>public.overview_dashboard.memory</code>.
   */
  public final TableField<OverviewDashboardRecord, Double> MEMORY =
      createField(DSL.name("memory"), SQLDataType.DOUBLE.nullable(false), this, "");

  private OverviewDashboard(Name alias, Table<OverviewDashboardRecord> aliased) {
    this(alias, aliased, null);
  }

  private OverviewDashboard(Name alias, Table<OverviewDashboardRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.overview_dashboard</code> table reference
   */
  public OverviewDashboard(String alias) {
    this(DSL.name(alias), OVERVIEW_DASHBOARD);
  }

  /**
   * Create an aliased <code>public.overview_dashboard</code> table reference
   */
  public OverviewDashboard(Name alias) {
    this(alias, OVERVIEW_DASHBOARD);
  }

  /**
   * Create a <code>public.overview_dashboard</code> table reference
   */
  public OverviewDashboard() {
    this(DSL.name("overview_dashboard"), null);
  }

  public <O extends Record> OverviewDashboard(Table<O> child, ForeignKey<O, OverviewDashboardRecord> key) {
    super(child, key, OVERVIEW_DASHBOARD);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.OVERVIEW_DASHBOARD_STARTTIME_IDX);
  }

  @Override
  public OverviewDashboard as(String alias) {
    return new OverviewDashboard(DSL.name(alias), this);
  }

  @Override
  public OverviewDashboard as(Name alias) {
    return new OverviewDashboard(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public OverviewDashboard rename(String name) {
    return new OverviewDashboard(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public OverviewDashboard rename(Name name) {
    return new OverviewDashboard(name, null);
  }

  // -------------------------------------------------------------------------
  // Row8 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row8<OffsetDateTime, OffsetDateTime, String, String, String, String, Double, Double> fieldsRow() {
    return (Row8) super.fieldsRow();
  }
}
