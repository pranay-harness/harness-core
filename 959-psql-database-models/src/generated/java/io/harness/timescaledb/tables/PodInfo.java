/*
 * Copyright 2021 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/*
 * This file is generated by jOOQ.
 */
package io.harness.timescaledb.tables;

import io.harness.timescaledb.Indexes;
import io.harness.timescaledb.Public;
import io.harness.timescaledb.tables.records.PodInfoRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class PodInfo extends TableImpl<PodInfoRecord> {
  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>public.pod_info</code>
   */
  public static final PodInfo POD_INFO = new PodInfo();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<PodInfoRecord> getRecordType() {
    return PodInfoRecord.class;
  }

  /**
   * The column <code>public.pod_info.accountid</code>.
   */
  public final TableField<PodInfoRecord, String> ACCOUNTID =
      createField(DSL.name("accountid"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.pod_info.clusterid</code>.
   */
  public final TableField<PodInfoRecord, String> CLUSTERID =
      createField(DSL.name("clusterid"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.pod_info.instanceid</code>.
   */
  public final TableField<PodInfoRecord, String> INSTANCEID =
      createField(DSL.name("instanceid"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.pod_info.starttime</code>.
   */
  public final TableField<PodInfoRecord, OffsetDateTime> STARTTIME =
      createField(DSL.name("starttime"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

  /**
   * The column <code>public.pod_info.stoptime</code>.
   */
  public final TableField<PodInfoRecord, OffsetDateTime> STOPTIME =
      createField(DSL.name("stoptime"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

  /**
   * The column <code>public.pod_info.parentnodeid</code>.
   */
  public final TableField<PodInfoRecord, String> PARENTNODEID =
      createField(DSL.name("parentnodeid"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.pod_info.namespace</code>.
   */
  public final TableField<PodInfoRecord, String> NAMESPACE =
      createField(DSL.name("namespace"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.pod_info.name</code>.
   */
  public final TableField<PodInfoRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.pod_info.cpurequest</code>.
   */
  public final TableField<PodInfoRecord, Double> CPUREQUEST =
      createField(DSL.name("cpurequest"), SQLDataType.DOUBLE, this, "");

  /**
   * The column <code>public.pod_info.memoryrequest</code>.
   */
  public final TableField<PodInfoRecord, Double> MEMORYREQUEST =
      createField(DSL.name("memoryrequest"), SQLDataType.DOUBLE, this, "");

  /**
   * The column <code>public.pod_info.workloadid</code>.
   */
  public final TableField<PodInfoRecord, String> WORKLOADID =
      createField(DSL.name("workloadid"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.pod_info.createdat</code>.
   */
  public final TableField<PodInfoRecord, OffsetDateTime> CREATEDAT = createField(DSL.name("createdat"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this,
      "");

  /**
   * The column <code>public.pod_info.updatedat</code>.
   */
  public final TableField<PodInfoRecord, OffsetDateTime> UPDATEDAT = createField(DSL.name("updatedat"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this,
      "");

  private PodInfo(Name alias, Table<PodInfoRecord> aliased) {
    this(alias, aliased, null);
  }

  private PodInfo(Name alias, Table<PodInfoRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.pod_info</code> table reference
   */
  public PodInfo(String alias) {
    this(DSL.name(alias), POD_INFO);
  }

  /**
   * Create an aliased <code>public.pod_info</code> table reference
   */
  public PodInfo(Name alias) {
    this(alias, POD_INFO);
  }

  /**
   * Create a <code>public.pod_info</code> table reference
   */
  public PodInfo() {
    this(DSL.name("pod_info"), null);
  }

  public <O extends Record> PodInfo(Table<O> child, ForeignKey<O, PodInfoRecord> key) {
    super(child, key, POD_INFO);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.POD_INFO_STARTTIME_IDX, Indexes.POD_INFO_STARTTIME_UNIQUE_RECORD_INDEX);
  }

  @Override
  public PodInfo as(String alias) {
    return new PodInfo(DSL.name(alias), this);
  }

  @Override
  public PodInfo as(Name alias) {
    return new PodInfo(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public PodInfo rename(String name) {
    return new PodInfo(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public PodInfo rename(Name name) {
    return new PodInfo(name, null);
  }

  // -------------------------------------------------------------------------
  // Row13 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row13<String, String, String, OffsetDateTime, OffsetDateTime, String, String, String, Double, Double, String,
      OffsetDateTime, OffsetDateTime>
  fieldsRow() {
    return (Row13) super.fieldsRow();
  }
}
