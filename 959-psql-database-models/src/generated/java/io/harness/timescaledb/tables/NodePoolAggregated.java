/*
 * Copyright 2021 Harness Inc. All rights reserved.
 * Use of this source code is governed by the PolyForm Shield 1.0.0 license
 * that can be found in the licenses directory at the root of this repository, also available at
 * https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt.
 */

/*
 * This file is generated by jOOQ.
 */
package io.harness.timescaledb.tables;

import io.harness.timescaledb.Keys;
import io.harness.timescaledb.Public;
import io.harness.timescaledb.tables.records.NodePoolAggregatedRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class NodePoolAggregated extends TableImpl<NodePoolAggregatedRecord> {
  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>public.node_pool_aggregated</code>
   */
  public static final NodePoolAggregated NODE_POOL_AGGREGATED = new NodePoolAggregated();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<NodePoolAggregatedRecord> getRecordType() {
    return NodePoolAggregatedRecord.class;
  }

  /**
   * The column <code>public.node_pool_aggregated.name</code>.
   */
  public final TableField<NodePoolAggregatedRecord, String> NAME =
      createField(DSL.name("name"), SQLDataType.CLOB, this, "");

  /**
   * The column <code>public.node_pool_aggregated.clusterid</code>.
   */
  public final TableField<NodePoolAggregatedRecord, String> CLUSTERID =
      createField(DSL.name("clusterid"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.node_pool_aggregated.accountid</code>.
   */
  public final TableField<NodePoolAggregatedRecord, String> ACCOUNTID =
      createField(DSL.name("accountid"), SQLDataType.CLOB.nullable(false), this, "");

  /**
   * The column <code>public.node_pool_aggregated.sumcpu</code>.
   */
  public final TableField<NodePoolAggregatedRecord, Double> SUMCPU =
      createField(DSL.name("sumcpu"), SQLDataType.DOUBLE, this, "");

  /**
   * The column <code>public.node_pool_aggregated.summemory</code>.
   */
  public final TableField<NodePoolAggregatedRecord, Double> SUMMEMORY =
      createField(DSL.name("summemory"), SQLDataType.DOUBLE, this, "");

  /**
   * The column <code>public.node_pool_aggregated.maxcpu</code>.
   */
  public final TableField<NodePoolAggregatedRecord, Double> MAXCPU =
      createField(DSL.name("maxcpu"), SQLDataType.DOUBLE, this, "");

  /**
   * The column <code>public.node_pool_aggregated.maxmemory</code>.
   */
  public final TableField<NodePoolAggregatedRecord, Double> MAXMEMORY =
      createField(DSL.name("maxmemory"), SQLDataType.DOUBLE, this, "");

  /**
   * The column <code>public.node_pool_aggregated.starttime</code>.
   */
  public final TableField<NodePoolAggregatedRecord, OffsetDateTime> STARTTIME =
      createField(DSL.name("starttime"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

  /**
   * The column <code>public.node_pool_aggregated.endtime</code>.
   */
  public final TableField<NodePoolAggregatedRecord, OffsetDateTime> ENDTIME =
      createField(DSL.name("endtime"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

  /**
   * The column <code>public.node_pool_aggregated.updatedat</code>.
   */
  public final TableField<NodePoolAggregatedRecord, OffsetDateTime> UPDATEDAT = createField(DSL.name("updatedat"),
      SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this,
      "");

  private NodePoolAggregated(Name alias, Table<NodePoolAggregatedRecord> aliased) {
    this(alias, aliased, null);
  }

  private NodePoolAggregated(Name alias, Table<NodePoolAggregatedRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>public.node_pool_aggregated</code> table reference
   */
  public NodePoolAggregated(String alias) {
    this(DSL.name(alias), NODE_POOL_AGGREGATED);
  }

  /**
   * Create an aliased <code>public.node_pool_aggregated</code> table reference
   */
  public NodePoolAggregated(Name alias) {
    this(alias, NODE_POOL_AGGREGATED);
  }

  /**
   * Create a <code>public.node_pool_aggregated</code> table reference
   */
  public NodePoolAggregated() {
    this(DSL.name("node_pool_aggregated"), null);
  }

  public <O extends Record> NodePoolAggregated(Table<O> child, ForeignKey<O, NodePoolAggregatedRecord> key) {
    super(child, key, NODE_POOL_AGGREGATED);
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public List<UniqueKey<NodePoolAggregatedRecord>> getKeys() {
    return Arrays.<UniqueKey<NodePoolAggregatedRecord>>asList(Keys.NODE_POOL_AGGREGATED_UNIQUE_RECORD_INDEX);
  }

  @Override
  public NodePoolAggregated as(String alias) {
    return new NodePoolAggregated(DSL.name(alias), this);
  }

  @Override
  public NodePoolAggregated as(Name alias) {
    return new NodePoolAggregated(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public NodePoolAggregated rename(String name) {
    return new NodePoolAggregated(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public NodePoolAggregated rename(Name name) {
    return new NodePoolAggregated(name, null);
  }

  // -------------------------------------------------------------------------
  // Row10 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row10<String, String, String, Double, Double, Double, Double, OffsetDateTime, OffsetDateTime, OffsetDateTime>
  fieldsRow() {
    return (Row10) super.fieldsRow();
  }
}
