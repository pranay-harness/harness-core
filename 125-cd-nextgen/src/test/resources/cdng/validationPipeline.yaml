pipeline:
  name: "Manager Service Deployment"
  identifier: null
  stages:
    - stage:
        identifier: null
        name: "qa stage"
        type: Deployment
        spec:
          serviceConfig:
            service:
              identifier: manager
            serviceDefinition:
              type: Kubernetes
              spec:
                artifacts:
                  primary:
                    type: Dockerhub
                    spec:
                      connectorRef: "https://registry.hub.docker.com/"
                      imagePath: "library/nginx"
                      tag: "1.19"
                manifests:   # {k8Manifest |  valuesOverride | pcfManifest |  HelmSourceRepo | HelmSourceRepo | Kustomize | openShift}
                  - manifest:
                      identifier: baseValues
                      type: K8sManifest
                      spec:
                        store:
                          type: Git
                          spec:
                            connectorRef: BBPSsTiCQ3OnD87_SHrSmw
                            gitFetchType: Branch
                            branch: master
                            paths:
                              - test/spec
            stageOverrides:
              manifests:
                - manifest:
                    identifier: qaOverride
                    type: Values
                    spec:
                      store:
                        type: Git
                        spec:
                          connectorRef: BBPSsTiCQ3OnD87_SHrSmw
                          gitFetchType: Branch
                          branch: master
                          paths:
                            - test/qa/values_1.yaml
          infrastructure:
            environment:
              # Give a name to the environment where deployment is being done (Dev, QA, Production, etc). You can give any name and if an environment with this name doesn't exist, it will be created. REQUIRED
              name:
              identifier: stagingInfra
              # Type of the environment where deployment is being done if the environment doesn't already exist. Options: pre-production | production. pre-production is default. OPTIONAL
              # If there is an existing environment with the specified name, the type of existing environment will be used.
              type: PreProduction
              tags:
                - key: cloud
                  value: AWS
                - key: team
                  value: cdp
            # Infrastructure Type. Options: kubernetes-cluster, kubernetes-direct, kubernetes-gke, ecs, data-center, etc. See Infrastructure Types. REQUIRED
            # Dynamic type ???
            infrastructureDefinition:
              # Infrastructure Type. Options: kubernetes-cluster, kubernetes-direct, kubernetes-gke, ecs, data-center, etc. See Infrastructure Types. REQUIRED
              # Dynamic type ???
              type: KubernetesDirect
              spec:
                # Spec for Infrastructure Type kubernetes-direct
                connectorRef: 2JrX8ESYSTWbhBTPBu7slQ
                # namespace
                namespace: default
                # release name
                releaseName: vaibhav
          execution:
            steps:
              - step:
                  name: "Rollout Deployment"
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  spec:
                    timeout: 120000
                    skipDryRun: false
              - step:
                  name: "http"
                  identifier: http
                  type: Http
                  spec:
                    socketTimeoutMillis: 1000
                    method: GET
                    url: wrongUrl
              - step:
                  identifier: shellScript
                  type: ShellScript
                  spec:
                    executeOnDelegate: true
                    connectionType: SSH
                    scriptType: BASH
                    scriptString: |
                      echo 'I should not execute'
            rollbackSteps:
              - step:
                  name: "Rollback Rollout Deployment"
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  spec:
                    timeout: 120000
              - step:
                  identifier: shellScript2
                  type: ShellScript
                  spec:
                    executeOnDelegate: true
                    connectionType: SSH
                    scriptType: BASH
                    scriptString: |
                      echo 'I should be executed during rollback'
    - stage:
        identifier: prodStage
        name: "prod stage"
        type: Deployment
        spec:
          serviceConfig:
            service:
              identifier: manager
            serviceDefinition:
              type: Kubernetes
              spec:
                artifacts:
                  primary:
                    type: Dockerhub
                    spec:
                      connectorRef: "https://registry.hub.docker.com/"
                      imagePath: "library/nginx"
                      tag: "1.18"
                manifests:   # {k8Manifest |  valuesOverride | pcfManifest |  HelmSourceRepo | HelmSourceRepo | Kustomize | openShift}
                  - manifest:
                      identifier: baseValues
                      type: K8sManifest
                      spec:
                        store:
                          type: Git
                          spec:
                            connectorRef: BBPSsTiCQ3OnD87_SHrSmw
                            gitFetchType: Branch
                            branch: master
                            paths:
                              - test/spec
            stageOverrides:
              manifests:   # {k8Manifest |  valuesOverride | pcfManifest |  HelmSourceRepo | HelmSourceRepo | Kustomize | openShift}
                - manifest:
                    identifier: prodOverride
                    type: Values
                    spec:
                      store:
                        type: Git
                        spec:
                          connectorRef: BBPSsTiCQ3OnD87_SHrSmw
                          gitFetchType: Branch
                          branch: master
                          paths:
                            - test/prod/values.yaml
          infrastructure:
            environment:
              # Give a name to the environment where deployment is being done (Dev, QA, Production, etc). You can give any name and if an environment with this name doesn't exist, it will be created. REQUIRED
              name:
              identifier: stagingInfra
              # Type of the environment where deployment is being done if the environment doesn't already exist. Options: pre-production | production. pre-production is default. OPTIONAL
              # If there is an existing environment with the specified name, the type of existing environment will be used.
              type: PreProduction
              tags:
                - key: cloud
                  value: AWS
                - key: team
                  value: cdp
            # Infrastructure Type. Options: kubernetes-cluster, kubernetes-direct, kubernetes-gke, ecs, data-center, etc. See Infrastructure Types. REQUIRED
            # Dynamic type ???
            infrastructureDefinition:
              # Infrastructure Type. Options: kubernetes-cluster, kubernetes-direct, kubernetes-gke, ecs, data-center, etc. See Infrastructure Types. REQUIRED
              # Dynamic type ???
              type: KubernetesDirect
              spec:
                # Spec for Infrastructure Type kubernetes-direct
                connectorRef: 2JrX8ESYSTWbhBTPBu7slQ
                # namespace
                namespace: default
                # release name
                releaseName: vaibhav
          execution:
            steps:
              - step:
                  name: "Rollout Deployment"
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  spec:
                    timeout: 120000
                    skipDryRun: false